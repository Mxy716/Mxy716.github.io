[{"title":"mysql入门","url":"/2023/07/12/mysql/","content":"怎么学习\n\n听懂(100%)\n多看bug - 多看问题\n练打字 - 多敲\n\n\n\n人机交互\n\nCLI (Command Line Interface) - 命令行方式 - 需要记忆大量的dos命令,比较繁琐\nGUI(Graphical User Interface) - 用户界面方式 - “傻瓜式操作”\n可执行程序xx.exe文件[C语言编写之后直接编译的程序],如果以后双击它之后,如果闪退,说明计算机告诉你,只能采用CLI\n\n\n为什么要进行环境变量的配置\n\nwin+r - 输入cmd\ncmd窗口,dos窗口,黑窗口,终端\n\n输入命令notepad - 成功唤醒记事本的程序\n接着输入命令 - success - 报错,大概的意思就是不是系统内部或者外部的命令\n\nwindows系统执行命令的顺序\n\n优先到当前目录下去查找是否存在这个命令(notepad.exe).\n\n如果不存在,继续查找环境变量Path中的路径是否包含这个命令所在的目录\ncmd窗口中输入path - 查找C:\\WINDOWS\n\n\n\n到C盘WINDOWS目录中去查找是否存在notepad.exe&#x2F;NOTEPAD.exe\n\n\n\n\n\n思考 - 在我们没有对mysql进行环境变量配置之前,想用使用mysql.exe命令???\n只能手动采用dos命令进入到mysql的bin目录\nC:\\User\\admin&gt;d:\n\nD:\\&gt;cd temp\n\ncd - change direcotry\nD:\\temp\\&gt;cd mysql-8.0.32-winx64\n\n具体的目录名不需要敲全了,敲几个前缀 + tab键\n继续进入到终点的目录bin\nD:\\temp\\mysql-8.0.32-winx64&gt;cd bin\n\nD:\\temp\\mysql-8.0.32-winx64\\bin&gt;mysql\n\n\n1. 安装mysql\n版本要求:至少是5.7&#x2F;8.x\n\n\n\n官方下载 - https://dev.mysql.com/downloads/mysql/\n\n下载解压缩到一个合法的目录\n\n目录名不要带有中文,不要带有特殊符号(Program File(x86))\n\n\n进行一个环境变量的配置\n\n\n右击计算机 - 属性 - 高级系统设置 - 环境变量 - 系统变量\n\n定位到默认的自带的内置的变量名Path - 编辑 - 新建\n然后将mysql的bin目录的绝对地址拷贝进去即可.\n\n以后只要环境变量进行了设置 - 应用 - 确定 - 关闭所有的设置窗口\n一定要重启cmd窗口\n\n重新打开cmd - 输入mysql看是否生效\n\n\n\n\n解压之后的目录中新建一个文件my.ini文件\n(注意点: windows - 工具栏 - 显示计算机扩展名&#x2F;后缀名 - 勾选)\n\n编辑my.ini文件\n唯一需要修改的只有basedir,把它修改成自己的mysql-8.0.32-winx64的绝对地址\n[client]# 设置mysql客户端默认字符集default-character-set=utf8       [mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=C:\\\\web\\\\mysql-8.0.11# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错# datadir=C:\\\\web\\\\sqldata# 允许最大连接数max_connections=20# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB\n\n\n\n\n\n以管理员身份打开 cmd 命令行工具，切换目录 - 进入到bin目录\nD:\\temp\\mysql-8.0.32-winx64\\bin&gt;\n\n初始化数据库\nD:\\temp\\mysql-8.0.32-winx64\\bin&gt;mysqld --initialize --console\n\n1. 分配一个默认的密码\n2. mysql-8.0.32-winx64是否自动生成了data目录\n\n安装mysqld\nD:\\temp\\mysql-8.0.32-winx64\\bin&gt;mysqld install\n\n检测一下mysql的服务是否安装成功 - 右击计算机 - 管理 - 服务 - 服务和应用程序 - 右边的窗口 - MYSQL\n只有mysql服务处于正在执行的状态,那么mysql才能够正常使用,建议右击MYSQL属性 - 设置成开机自动启动.\n\n启动mysql\nD:\\temp\\mysql-8.0.32-winx64\\bin&gt;net start mysql\n\nmysql服务的运行状态 - 正在运行中\n\n登录\nD:\\temp\\mysql-8.0.32-winx64\\bin&gt;mysql -uroot -p临时密码\n\n\n\n\n如果临时密码使用不了\n\n关闭mysql服务关闭\n重新打开cmdC:\\User\\admin&gt;net stop mysql\n\n删除data目录\n\nmysqld –initialize –console以及net start mysql再登录.\n\n\n\n\n\n\n直接修改密码即可\nalter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;root&#x27;;\n\n退出mysql登录\nmysql&gt;exit\n\n重新登录即可\nmysql -uroot -proot\n\n\n\n2-pre.mysql体系\n\nsql语句(ddl,dml,dcl,tcl,dql)的使用 - 专门用来操作关系型数据库的.\n\n互联网项目对sql的要求是降低的 - 基于单表sql开发的模式\n传统行业对sql的要求是高的.\n\n\n视图,存储过程,索引(B+树),事务,函数,表(基本单位),用户 - 数据库的单位&#x2F;对象\n\n应用架构\n\n单体架构 - 单台计算机仅仅只有一个mysql节点 - 适合小型的项目\n\n主从复制架构 - 至少是2个节点,主节点负责写入,从节点读取.\n难点 - 主从的数据的同步问题 - 适合中小型项目\n\n集群 - 适合大型的项目,为了解决三高问题.高性能,高并发,高可用.\n\n\n\n\n\n\n2. mysql介绍\n\nmysql属于瑞典的Mysql AB公司的,隶属于Oracle(甲骨文,主打的产品oracle数据库)旗下产品.\nmysql特点 - 体积小,速度快,特别适合中小型企业,开源,免费的.分成社区版和商业版.\n市面上主流的关系型数据库 - mysql,oracle,sqlserver(MS-微软)\nmysql软件也是采用c&#x2F;c++编写的.\n\n\n3. 专业术语\n\nDB - database 数据库 - 将数据按照一定的数据结构来进行存储,管理和组织的.\n数据的仓库\n\nDBMS - database management system - 数据库管理系统.用于操纵和控制数据库的系统.\n用于建立,使用和维护我们的db. 用户通过dbms来访问db中的数据,dba通过dbms来管理和维护\n我们的db. 使用dbms来保证db的安全性和完整性.\n\nRDBMS - relational database management system关系型数据库管理系统 - 负责管理关系型数据库\n\n关系型数据库 - 数据呈现的方式是一张二维表[行和列] - 表格型数据库\n\n非关系型数据库[nosql] - 键值对数据库redis,文档型数据库mongodb\n\nDBS - 数据库系统 - 类似”生态概念\nDBS &#x3D; DB + DBA[数据库管理员] + DBMS\n\n\n\n\n4. SQL分类\n它同时也是我们的脚本文件的后缀.\n\n\nstructured query language结构化查询语言…\n按照功能来划分\n\nDDL - Data Definition Language - 数据定义语言\ncreate,drop,alter等等…\n\nDCL - Data Control Language - 数据控制语言\ngrant(授权),revoke(取消权限)等等…\n\nDQL - Data Query Languge  - 数据查询语言\nselect - 查询\n\nDML - Data Manipution Language - 数据操纵语言\ninsert,delete,update\n\nTCL - Transaction Control Languge - 事务控制语言\ncommit,rollback,savepoint等等…\n\n\n\n\nmysql的客户端的选择\n\n界面更加友好的话 - navicat导航猫 - 不建议装.\n安装好mysql之后,实际上它会默认安装好mysql-server以及mysql-client\n\n\n5. 体验 - 导入脚本\nmysql是以仓库的方式来管理若干表的.建表之前,需要先创建仓库.并且不同的仓库之间是不可见的.\nmysql -uroot -proot\n\n查看当前所有的数据库\nshow databases;\n\n删除仓库\ndrop database 数据库名;\n\n创建一个仓库\ncreate database 数据库名;create database yuke;\n\n表一定是放在仓库下的 - 若干张表构建一个db\n-- 选择dbuse 数据库名use yuke\n\n查看一下当前仓库下所有的表\nshow tables;\n\n\n导入脚本的两种方式:\n\nsource sql脚本文件的绝对地址;\nmysql&gt; source /Users/admin/Documents/success/e/mysql_cn.sql ;\n\n手动打开sql脚本 - 复制内容 - 粘贴\n\n\n\n\n6. 简单查询\n查询的本质\n\n到哪里查-查看的是哪张表\n查什么 - 查看的列[数据域Field]\n\n\n\n\n客户端的命令 - 查看表的结构\ndesc 表名desc s_emp;\n\n\n每张表都会拥有一个主键列,通常是id列.存在组合主键的情况,主键的特点是用来唯一标识元组[一行]记录的.\n主键列的特点 : 非空且唯一.\n\n\n\n单表查询语法\nSELECT 列名 [列别名],列名2 [列别名2] FROM 表名WHERE 条件语句ORDER BY 排序列;\n\n精简一点\nSELECT 列名 [列别名],列名2 [列别名2] FROM 表名;\n\n\n特殊 - 查询所有列,直接用*表示,但是开发中不允许的…\nselect * from s_emp;\n\n列比较多的场景\nselect * from s_emp \\G;\n\n\n1. 列别名\n\n查看员工的名字和薪资以及入职日期\nselect first_name,salary,start_date from s_emp;\n\n取别名 - 提高可读性\nselect first_name 名字,salary 薪资,start_date 入职日期 from s_emp;\n\nselect first_name as 名字,salary as 薪资,start_date as 入职日期 from s_emp;\n\nselect first_name &quot;名字&quot;,salary &quot;薪资&quot;,start_date &quot;入职日期&quot; from s_emp;   select first_name as &quot;名字&quot;,salary as &quot;薪资&quot;,start_date as &quot;入职日期&quot; from s_emp;\n\n数据库的单行函数 - concat函数 - 表示拼接 - concat(列1,列2,...) - 可变长参数列表\n-- 查询员工的姓名(last_name,first_name)select last_name,first_name from s_emp;   -- 仅仅只有1列展示-- db中表示字符串或者字符的永远是单引号.-- db中的双引号是用来包裹格式用的select concat(last_name,&#x27; &#x27;,first_name) &quot;姓 名&quot; from s_emp;\n\n\n2. 练习\n\n查看员工的所有的职称title\nselect title from s_emp;-- 检索出所有的title,包括重复的数据-- 使用关键字distinct来实现去重操作select distinct title from s_emp;-- 其他应用-- 分组函数count,统计表中的记录数[行数],重复的数据也算一行(有一个算一个).null值数据不算的.-- 统计title的数量select count(distinct title) from s_emp;\n\n查看员工的年薪\n-- 列是可以参加计算的,但是null值的数据计算的结果还是null值select first_name,salary*12 年薪 from s_emp;-- 上面查询出来的年薪不带提成的,需求是带上提成select first_name,salary*12*(1+commission_pct/100) 年薪 from s_emp;-- 发现上面查询出来的年薪,如果员工不带提成,计算的结果是null,需要使用mysql的空值置换函数-- coalesce(m,n) 如果m为null则结果是n,否则结果仍然是m-- 类似于java中的if/else  ,  三元操作符  m==null?n:mselect first_name,salary*12*(1+coalesce(commission_pct,0)/100) 年薪 from s_emp;-- 使用mysql的关于数字的函数truncate或者round-- round(m[,n])  n存在,则代表小数的精度 - 四舍五入-- truncate(m,n) n保留的精度,直接截取-- 函数都是允许嵌套使用的-- 年薪保留整数位select first_name,truncate(salary*12*(1+coalesce(commission_pct,0)/100),0) 年薪 from s_emp;\n\n查看区域表所有的信息\nselect * from s_region;-- Africa / Middle East 非洲/中东-- Asia 亚洲-- Europe 欧洲-- North America   北美-- South America   南美case 列名 ... \twhen 列值  then &#x27;新值&#x27;\twhen 列值  then &#x27;新值&#x27;\twhen 列值  then &#x27;新值&#x27;\telse &#x27;未知值&#x27;end 列别名select id,case name\twhen &#x27;Asia&#x27; then &#x27;亚洲&#x27;\twhen &#x27;Europe&#x27; then &#x27;欧洲&#x27;\twhen &#x27;North America&#x27; then &#x27;北美&#x27;\telse &#x27;未知区域&#x27;end 区域名 from s_region;-- 上面的列和when后面的值是精确的匹配,如果是范围匹配-- 查看id,first_name,员工的薪水,薪水的等级-- salary&gt;=1800,高产  如果是[1200,1800) - 中产,低于120 - 无产select id,first_name,salary,case \twhen salary&gt;=1800 then &#x27;高产&#x27;\twhen salary&gt;=1200 and salary&lt;1800 then &#x27;中产&#x27;\telse &#x27;无产&#x27;end &#x27;工资等级&#x27; from s_emp;\n\n查看订单的id,总价,支付方式(现金&#x2F;信用卡)以及下单日期\nselect id,total,case payment_type\twhen &#x27;CREDIT&#x27; then &#x27;信用卡&#x27;\twhen &#x27;CASH&#x27; then &#x27;现金&#x27;\telse &#x27;未知方式&#x27;end 支付方式,date_ordered from s_ord;\n\n\n\n7. 作业\n字符串函数\ninstr(str,substr) - 返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0)\nselect intsr(&#x27;abdcd&#x27;,&#x27;d&#x27;)\n\nlpad(str,len,padstr) - 用字符串padstr填补str左端直到字串长度为len并返回 \nselect lpad(&#x27;hkw&#x27;,6,&#x27;mxy&#x27;);\n\n\n\nrpad(str,len,padstr) - 用字符串padstr填补str右端直到字串长度为len并返回\nselect rpad(&#x27;mxy&#x27;,7,&#x27;hkw&#x27;);\n\n\n\nleft(str,len) - 返回字符串str的左端len个字符 \nselect left(&#x27;mxy&#x27;,2);\n\n\n\nright(str,len) - 返回字符串str的右端len个字符 \nselect right(&#x27;mxy&#x27;,2);\n\n\n\nsubstring(str,pos,len) - 返回字符串str的位置pos起len个字符  \nselect substring(&#x27;123456&#x27;,&#x27;2&#x27;,2);\n\n\n\nsubstring(str,pos) - 返回字符串str的位置pos起后面的子串 \nselect substring(&#x27;qwert&#x27;,&#x27;2&#x27;);\n\n\n\nltrim(str) - 返回删除了左空格的字符串str  \nselect ltrim(&#x27; string&#x27;);\n\n\n\nrtrim(str)  - 返回删除了右空格的字符串str  \nselect rtrim(&#x27;string&#x27;);\n\n\n\nspace(n) - 返回由n个空格字符组成的一个字符串  \nselect space(4);\n\n\n\nreplace(str,from_str,to_str)  - 用字符串to_str替换字符串str中的子串from_str并返回 \nselect replace(&#x27;13331&#x27;,&#x27;333&#x27;,&#x27;222&#x27;);\n\n\n\nreverse(str) - 颠倒字符串str的字符顺序并返回\nselect reverse(&#x27;abcdefg&#x27;);\n\n\n\ninsert(str,pos,len,newstr) - 把字符串str由位置pos起len个字符长的子串替换为字符串\nselect insert(&#x27;abcdefg&#x27;,&#x27;2&#x27;,3,&#x27;dcb&#x27;);\n\n\n\nlower(str) - 返回小写的字符串str  \nselect lower(&#x27;ABCDE&#x27;);\n\n\n\nupper(str) - 返回大写的字符串str\nselect lower(&#x27;abcde&#x27;);\n\n\n\nchar_length(str) -  不管汉字还是数字或者是字母都算是一个字符。\nselect char_length(&#x27;穆星宇123&#x27;);\n\n\n\nlength(str);&#x2F;&#x2F;汉字占3个,其他占1个.\nselect length(&#x27;穆星宇123&#x27;);\n\n\n\n\n数字函数\nabs(n) - 求绝对值\nselect abs(-30);\n\n\n\nmod(n,m) - 取模运算,返回n被m除的余数(同%操作符)\nselect mod(7,3);\n\n\n\nfloor(n) - 返回不大于n的最大整数值 - 向下取整  \nselect floor(3.1772);\n\n\n\nceiling(n) - 返回不小于n的最小整数值  - 向上取整 \nselect ceiling(3.37);\n\n\n\nround(n[,d]) - 返回n的四舍五入值,保留d位小数(d的默认值为0)\nselect round(3.57);      select round(3.5762,2);\n\n\n\npow(x,y) - 返回值x的y次幂  \nselect pow(12,3);\n\n\n\nsqrt(n) - 返回非负数n的平方根\nselect sqrt(4);\n\n\n\npi() - 返回圆周率  \nselect pi();\n\n\n\nrand() - 返回在范围[0到1.0)内的随机浮点值\nselect rand();\n\n\n\ntruncate(n,d) - 保留数字n的d位小数并返回  - 直接截取\nselect truncate(3.1415,2)\n\n\n\n\n日期函数查询当前系统的日期 - select now();\nselect now();\n\n\n\n\ndayofweek(date) - 返回日期date是星期几(1&#x3D;星期天,2&#x3D;星期一,……7&#x3D;星期六,odbc标准)  \nselect dayofweek(now());\n\nweekday(date) - 返回日期date是星期几(0&#x3D;星期一,1&#x3D;星期二,……6&#x3D; 星期天)\nselect weekday(now());\n\n\n\nyear(date) - 返回date的年份(范围在1000到9999)    \nselect year(now());\n\n\n\nmonth(date)  - 返回date中的月份数值   \nselect month(&#x27;2023-07-10&#x27;);\n\n\n\ndayofmonth(date) - 返回date是一月中的第几日(在1到31范围内)   \nselect dayofmonth(now());\n\n\n\nhour(time) - 返回time的小时数(范围是0到23)  \nselect hour(now());\n\n\n\nminute(time) - 返回time的分钟数(范围是0到59)\nselect minute(now());\n\n\n\nsecond(time) - 返回time的秒数(范围是0到59) \nselect second(now());\n\n\n\nperiod_add(p,n) - 增加n个月到时期p并返回(p的格式’yymm’或’yyyymm’) \nmysql&gt;select period_add(‘202008’,3) ;\n注意:p可以是字符串,一定要满足一定的格式,或者可以直接使用date类型.\nselect period_add(&#x27;2307&#x27;,2);\n\n\n\nperiod_diff(p1,p2) - 返回在时期p1和p2之间月数(p1和p2的格式yymm或yyyymm)  p1-p2(p1减p2)\nselect period_diff(2302,2307);\n\n\n\ncurdate() - 以’yyyy-mm-dd’或yyyymmdd格式返回当前日期值(根据返回值所处上下文是字符串或数字) \nselect curdate();\n\n\n\ncurtime() - 以’hh:mm:ss’或hhmmss格式返回当前时间值(根据返回值所处上下文是字符串或数字)\nselect curtime();\n\n\n\nnow() - 以’yyyy-mm-dd hh:mm:ss’或yyyymmddhhmmss格式返回当前日期时间(根据返回值所处上下文是字符串或数字)     \nselect now();\n\n\n\nlast_day(date) - date日期所在月的最后一天是什么时候\nselect last_day(now());\n\n\n\ndatediff(d1,d2) - 两个日期d1,d2之间相差的天数\nselect datediff(20230717,20230831);\n\n\n\ntimestampdiff(type,d1,d2) - type是YEAR,d1和d2相差的年份,MONTH,月份\nd1,d2 - yyyymmdd\nselect timestampdiff(year,20210717,20230831);\n\n\n\n","tags":["mysql"]},{"title":"hexo搭建技术","url":"/2023/07/12/hexo%E6%90%AD%E5%BB%BA%E6%8A%80%E6%9C%AF/","content":"hexo+github搭建博客服务器\n\ncsdn,简书,有道笔记 - 广告比较多\nhexo+github[比较慢,翻墙]&#x2F;gitee[Git pages服务器 - 维护]&#x2F;阿里云服务器\n\n\n安装nodejs\n\n非中文的非特殊字符的目录中[目录中不要出现空格或者带有特殊符号的]\nD:&#x2F;node-v14.17.3-win-x64\n\n\n环境变量的配置\n\n桌面计算机 - 右击 - 属性 - 高级系统设置 - 环境变量(N)\n\n定位到下方的系统变量\n\n定位到变量名 - Path - 编辑 - 新建\n\nD:&#x2F;node-v14.17.3-win-x64\n\n一定要关闭所有的环境变量配置的窗口 - 确定\n\n打开终端[如果终端已经打开了,关闭 - 重新打开]\nwin[微软图标]+r - 输入cmd  - 输入如下指令检测nodejs是否配置成功\nnpm -v6.14.5 出现版本号,则说明配置成功               如果出现了不是内部或者外部的命令的同学,请检查自己的nodejs解压缩之后的路径是否成功配置到了path中\n\n\n简单认识npm\nnpm是javascript的一个**包[前端框架]**管理工具,并且是nodejs平台默认的包管理工具.\n通过npm可以安装,共享,分发代码,管理项目依赖关系.\n类似于java中的maven或者gradle[强大的项目构建工具以及项目依赖管理工具]\n\nnpm简单使用修改镜像\n为了下载速度变快,修改npm的镜像\nnpm config set registry https://registry.npm.taobao.org\n\n验证一下,镜像是否成功修改了\nnpm config get registryhttps://registry.npm.taobao.org/\n\n简单使用 - 不需要操作\n\n下载bootstrap\nnpm install 框架名称  - 默认下载的是最新的版本\nnpm install bootstrap@3\n\n\nHexo官网\nhttps://hexo.io/zh-cn/docs/\n\n安装\n\n假设你在D盘根目录下新建了一个文件夹hello-hexo[博客项目的根目录]\n\nwin+r - 打开终端\n\n通过dos命令进入到hello-hexo目录中\nC:/User/admin&gt;d:D:&gt;cd hello-hexoD:/hello-hexo&gt;npm install hexo-cli -g\n\n\n创建真正的博客目录D:/hello-hexo&gt;hexo init hello-blog\n\ncd hello-blogD:/hello-hexo/hello-blog&gt;npm install\n\n测试 - 启动博客服务器D:/hello-hexo/hello-blog&gt;hexo s\n\n关闭服务器\nctrl+c\n\n打开浏览器输入:localhost:4000\n常用主题模板\nhttps://blog.csdn.net/zgd826237710/article/details/99671027\n使用git命令来进行克隆,需要提前安装好git,检测git是否安装成功,重新打开终端\ngit --version\n\n注册码云账号\n推荐用QQ注册一下\n本地配置码云账号信息 - 配置文件 - 位置windows的用户主目录下\nC:&#x2F;User&#x2F;计算机用户名 - 观察是否存在**.gitconfig**文件,添加如下内容\n[user]\temail = 码云的QQ邮箱\tname = 用户名\n\n安装模板\n通过cmd进入到hello-blog目录中的themes目录中\nD:/hello-hexo/hello-blog&gt;cd themesD://hello-hexo/hello-blog/themes&gt;git clone https://gitee.com/guancg/hexo-theme-pure.git\n\n或者直接从github上直接clone\ngit clone https://github.com/cofess/hexo-theme-pure.git\n\n\n\n更新主题配置\n\n指定新的主题\nhello-blog目录下的_config.yml文件\ntheme: hexo-theme-pure\n\n\n\n\n重启服务器hexo s\n\n\n个人信息hexo-theme-pure&#x2F;_config.yml文件\noverriden  author:   author_title: 高级打字员  author_description: 个人简介。  location: \n\nMarkdown语法\n语法的编辑器 - https://typora.io/\n文件的后缀是md\n常用语法如下:1. 标题的语法:1~6标题 - # 一级标题    ## 二级标题   2. 代码块 - java,js,mysql...​~~~java 敲enter键3. 列表3-1. 无序列表     * 列表名称          有序列表     1. 列表名称     4. 高亮显示   `高亮显示内容`   5. 加粗字体   **粗体**   6. 斜体   *斜体*   7. 粗+斜   ***粗斜***   8. 段落   &gt; 空格   9. 引入外部图片   ![](xx.png)   10. 表格\n\n新建博文D://hello-hexo/hello-blog&gt;hexo n java\n\n效果:hello-blog目录下的source&#x2F;_ports&#x2F;自动生成一个java.md文件\n重启blog服务器\nD://hello-hexo/hello-blog&gt;hexo s\n\n\n\n主题的侧边栏\n侧边栏的链接生效\n将&#x2F;hello-blog&#x2F;themes&#x2F;hexo-theme-pure&#x2F;_source&#x2F;下的除了_data文件夹,其余文件夹\n拷贝一份放入到hello-blog目录下的source目录中即可\n\n文章的分类和标签\n只需要在文章的.md文件的自动生成的头部添加\ntitle: javadate: 2021-07-13 08:44:42categories: javatags: java\n\n博客的语言环境设置\n设置中文\nhello-blog下的_config.yml文件中\nlanguage: zh-CN\n\n图片显示问题\n\n安装插件 - npm install hexo-asset-img –save\n\n需要到hello-blog&#x2F;_config.yml文件中进行配置\npost_asset_folder: true\n\nhexo n 机器学习\n效果就是除了生成了机器学习.md还有一个机器学习文件夹,那么这篇文章的所有的图片就可以存储在机器学习文件夹中\n\nhexo s\n\n\n\n内置搜索的功能\n# Searchsearch:insight: true # you need to install `hexo-generator-json-content` before using Insight Searchbaidu: false # you need to disable other search engines to use Baidu search\n\n安装内置搜索插件\nnpm i -S hexo-generator-json-content\n\n评论\n不需要本地数据库进行存储的,用的是第三方的.\nLeanCloud - 官网地址 - https://www.leancloud.cn/\n注册 - 登录 - 控制台 - 创建应用 - 右下设置 - 应用凭证\nappId - sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz\nappKey - 3hn4ijEgSzJeRV4nkmXThmGV\n\n在hexo-theme-pure\\_config.yml文件中配置\n\nvaline: # Valine. https://valine.js.org appid: sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz  # your leancloud application appid appkey: 3hn4ijEgSzJeRV4nkmXThmGV# your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style meta: nick,mail,link # custom comment header pageSize: 10 # pagination size visitor: true # Article reading statistic https://valine.js.org/visitor.html\n\n#字数统计&amp;阅读时长\n\n\nnpm i -S hexo-wordcount\n\nhexo-theme-pure_config.yml文件中配置\npostCount:  enable: true  wordcount: true  # 文章字数统计  min2read: true  # 阅读时长预计 \n\n\n附件-优秀插件\n\n显示图片\nnpm install https://gitee.com/guancg/hexo-asset-image.git --save\n\n内置搜索\nnpm i -S hexo-generator-json-content\n\n字数统计&amp;阅读时长\nnpm i -S hexo-wordcount\n\n\n\n\ngithub部署\nnpm install hexo-deployer-git --save\n\n\n部署github\ngit config –global user.name “github用户名” \ngit config –global user.email “github邮箱”\n\n\ngithub.com\n\n\nchrome浏览器 + iguge - https://iguge.app/\n\n\n新建的仓库的名称必须是guancgsuccess.github.io\n仓库地址 - https://github.com/guancgsuccess/guancgsuccess.github.io.git\n\n\n安装github部署插件\nnpm install hexo-deployer-git –save\n\n\nhello-blog&#x2F;_config.yml文件\ndeploy:type: &#x27;git&#x27;repo: &#x27;https://github.com/guancgsuccess/guancgsuccess.github.io.git&#x27;branch: &#x27;master&#x27;\n\nhexo三连操作\nhexo clhexo ghexo shexo d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"vue2入门","url":"/2023/07/13/vue2%E5%85%A5%E9%97%A8/","content":"​         vue是用来构建用户界面的一个渐进式框架\n\n\n构建用户界面 - 将用户手中的数据通过某种方式,能够呈现出来.\n渐进式 - vue是自底向上的逐层应用,如果体量比较小的,只需要简单的轻量级的插件库即可.如果比较大,可以继续添加另外的插件库.\n\n\n\n\n发展史\n\nvue2.x - 入门\n最新稳定版本：2.7.14\n旧版本 - 2.6.x\n\n\nvue3.x - 趋势\n\n\n\n\nvue2中文学习文档 - https://v2.cn.vuejs.org/\n下载vue.js\n\n\n1. vue优点\n传统的仍然是使用javascript原生的技术或者使用javascript[简称js]的框架jquery.\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;script&gt;     //模拟一个data - 动态改变的 - 肯定是来自于db表中的数据     let data = &#x27;没有vue&#x27;     //只能通过js操作dom     //1. 获取dom元素 - 根据id属性的值来获取     let div = document.getElementById(&quot;app&quot;)     //2. 调用调用属性  -  访问/设置     div.innerHTML=&quot;hello-&quot;+data &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n\n\nvue出现解放了程序员用js操作dom的双手\n采用的是声明式编码,不再需要js去操作dom了,比较方便\n\n采用组件化编程的方式.提高组件的复用性\n\n\n采用的是虚拟DOM+diff算法,复用dom节点,提高效率\n\n\n\n4. vscode环境\n下载地址:https://code.visualstudio.com/\n下载必要的插件\n\nopen in browser\n本地协议的方式打开html文件\n\nLive Server - 启动一个轻量级的服务器\n使用http协议来请求访问我们的html文件\n\n\n\n\n\n\n新建一个文件夹yuke-vue\n项目的根目录\n\n打开vscode - 菜单栏file -  open Folder\n\n在项目的根目录下新建一个plugins目录 - 然后将vue.js拷贝进去.\n\n\n\n–\n5. vue-体验\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 定义一个div的容器,必须要给定一个唯一的id属性的值      并且一个页面中只能有一个容器 --&gt; &lt;div id=&quot;app&quot;&gt;     hello-&#123;&#123;msg&#125;&#125; &lt;/div&gt; &lt;!-- 如果页面中存在多个id相同的容器的时候,只有第一个是生效的 --&gt; &lt;!-- &lt;div id=&quot;app&quot;&gt;     hello-&#123;&#123;msg&#125;&#125; &lt;/div&gt; --&gt;  &lt;!--   引入vue.js --&gt; &lt;script src=&quot;plugins/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt;     // 定义了一个vue的实例     // 一个页面只能有唯一的一个vue实例     // vue实例是对应一个容器,通过el属性来进行绑定的     new Vue(&#123;         el:&#x27;#app&#x27;,         // 定义的data中的数据,它是可以流向到页面的         // 并且只要data中数据的改变了,页面都会重新渲染         data:&#123;             msg:&#x27;学习vue&#x27;         &#125;     &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n测试**: 开发中的data是动态改变的,模板中使用到该数据的地方都会重新渲染** - 为什么data数据要交给vue实例来管理.\n\n\n总结:\n\n一个页面中如果出现多个相同容器,一个vue实例的时候,默认是第一个容器是渲染成功的.\n一个容器应该只对应vue实例\nvue实例的el属性值对应容器的id属性值\n中的xxx是一个js表达式,也可以是**vue实例上的东西**\n\njs表达式 - 是可以产生具体的值的  1+2\njs代码 - if语句,while语句\njs表达式也是一种特殊的js代码\n\n\n\n\n6. vscode中设置一下代码的片段\n&quot;Print to console&quot;: &#123;\t\t&quot;scope&quot;: &quot;javascript,typescript&quot;,\t\t&quot;prefix&quot;: &quot;vv&quot;,\t\t&quot;body&quot;: [\t\t\t&quot;new Vue(&#123;&quot;\t\t\t\t&quot;    el:&#x27;#app&#x27;,&quot;\t\t\t\t&quot;    data:&#123;&quot;\t\t\t\t&quot;    &#125;&quot;\t\t\t&quot;&#125;);&quot;\t\t],\t\t&quot;description&quot;: &quot;Log output to console&quot;\t&#125;\n\n\n\n&quot;Print to console&quot;: &#123;\t \t&quot;prefix&quot;: &quot;cls&quot;,\t \t&quot;body&quot;: [\t \t\t&quot;console.log(&#x27;$1&#x27;);&quot;,\t\t\t&quot;$2&quot;\t\t],\t\t&quot;description&quot;: &quot;Log output to console&quot;\t&#125;\n\n\n7. 插值写法和指令写法\n插值写法 - 功能是用来解析标签体内容的\n&lt;开始标签&gt;&#123;&#123;data&#125;&#125;&lt;/结束标签&gt;\n\n指令写法 - 功能是用来解析标签的(绑定标签的属性,绑定标签的事件)\nv-bind v-model v-on v-for v-if v-show   &#x3D;&gt;  v-指令名称\nv-bind是单向绑定 - 数据流只能从data流向页面.\n\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;app&quot;&gt;        &lt;!-- 1. 插值写法 --&gt;        &lt;h1&gt;hello-&#123;&#123;city&#125;&#125;-&#123;&#123;name&#125;&#125;&lt;/h1&gt;        &lt;!-- 超链接         通过指令的写法来绑定href值        --&gt;        &lt;a v-bind:href=&quot;site.url&quot;&gt;&#123;&#123;site.wname&#125;&#125;&lt;/a&gt;        &lt;!-- v-bind:href可以简写成:href --&gt;        &lt;a :href=&quot;site.url&quot;&gt;&#123;&#123;site.wname&#125;&#125;&lt;/a&gt;    &lt;/div&gt;    &lt;script src=&quot;plugins/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        new Vue(&#123;            el:&#x27;#app&#x27;,            data:&#123;                // key:value                // json对象的格式   &#123;key1:value1,key2:value2,key3:value3&#125;                //value都是字符串类型,js单/双引号都是允许表示字符串的                city:&#x27;SuZhou&#x27;,                name:&#x27;aistar&#x27;,                //关于value允许是一切类型,那么value又可以是一个json对象.                site:&#123;                    url:&#x27;http://www.baidu.com&#x27;,                    wname:&#x27;百度一下&#x27;                &#125;            &#125;        &#125;);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n8. 单向绑定和双向绑定\n单向绑定:数据只能从data流向页面\n双向绑定:数据不仅可以从data流向页面,还可以从页面流向data\n双向绑定一般应用表单元素上(比如input&#x2F;select等等)\n双向绑定语法v-model:value可以写成成v-model,默认收集的就是value属性值.\n\n\n\n代码\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt;     &lt;!-- 单向绑定-数据只能从data流向页面 --&gt;     &lt;input type=&quot;text&quot; v-bind:value=&quot;single&quot;&gt;     &lt;!-- 双向绑定:数据不仅可以从data流向页面,还可以从页面流向data --&gt;     &lt;input type=&quot;text&quot; v-model:value=&quot;two&quot;&gt;     &lt;!-- v-model:value可以简写成v-model,默认收集的就是value属性值 --&gt;     &lt;input type=&quot;text&quot; v-model=&quot;two&quot;&gt;     &lt;br&gt;     &lt;!-- 插值语法 --&gt;     &#123;&#123;two&#125;&#125; &lt;/div&gt;  &lt;script src=&quot;plugins/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt;     new Vue(&#123;         el:&#x27;#app&#x27;,         data:&#123;             single:&#x27;单向&#x27;,             two:&#x27;双向&#x27;         &#125;     &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n9. 数据代理\nhello-&#123;&#123;msg&#125;&#125;  vue实例上的 &#123;&#123;_data.msg&#125;&#125;\n\n\n1. java中的代理\n正向代理\n客户端明确知道服务器的地址,但是没有办法进行直接的访问.需要通过代理服务器进行访问.\nclient[浏览器]    &#x3D;&gt; 输入网址(发送请求)    &#x3D;&gt;  代理服务器   &#x3D;&gt; 转发到目标服务器\n服务器是不知道具体的客户端的位置的.\n正向代理-代理的是客户端\n\n\n​\t\t举例:  我想跟       琪琪    强老师借钱\n\n反向代理\n场景: client &#x3D;&gt; taobao.com(背后有n个服务为taobao.com服务的)\nclient  &#x3D;&gt; 发送请求taobao.com[代理服务器的地址]  &#x3D;&gt; 代理server互换后台的那些N个服务[每个服务都有接口地址]我(client ) 向 琪琪借钱[代理server] &#x3D;&gt; 跟强&#x2F;王老师借了一点…\n客户端是不知道具体的服务器的位置的\n反向代理 - 代理的服务器(nginx)\n原因:为了真实的server的安全.\n\n\n2. Object.defineProperty\n&lt;script&gt;//比如定义一个json对象let user=&#123; name:&#x27;qiqi&#x27;, sex:&#x27;F&#x27;&#125;Object.defineProperty(user,&#x27;age&#x27;,&#123; value:18&#125;)//遍历/迭代对象中所有的属性//age默认是不可被迭代console.log(Object.keys(user));for(let k in user)&#123; console.log(k);      &#125;console.log(user)&lt;/script&gt;\n\n浏览器控制台\n \n\n\n使用 Object.defineProperty定义的属性是灰色的.\n代表这个属性不可被迭代&#x2F;遍历\n\n默认是不可被删除的\n  \n\n默认不可被修改\n\n\n\n配置项讲解,让Object.defineProperty定义的属性可以被迭代,修改,删除\nObject.defineProperty(user,&#x27;age&#x27;,&#123;  value:18,  // 配置项  //可以被修改  writable:true,  // 可以被删除  configurable:true,  //可以被枚举/遍历/迭代  enumerable:true&#125;)\n\n\n代码2\n效果: 修改age的值,能够对num造成影响\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;        &lt;script&gt;        //定义一个num        let num = 18        //比如定义一个json对象        let user=&#123;            name:&#x27;qiqi&#x27;,            sex:&#x27;F&#x27;,            // 修改num值,不会对age造成任何影响            // age:num        &#125;        //&quot;错误的视觉&quot;  -  修改num的值,好像是可以影响age        //num是age的代理        Object.defineProperty(user,&#x27;age&#x27;,&#123;           //修改age-对num造成影响                     //调用/访问age的值的时候,getter方法就会走              //user.age           //点击age:省略号  - 走一次getter           get()&#123;            console.log(&#x27;getter...&#x27;);            return num;           &#125;,           //只要修改age的值,那么就会调用setter方法           set(v)&#123;             console.log(&#x27;修改的值是:&#x27;+v);                num = v;           &#125;        &#125;)        console.log(user)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n\n3. 数据代理简单示例\n&lt;script&gt;let obj1 = &#123;x:10&#125;let obj2 = &#123;y:20&#125;//需求//1.通过Object.defineProperty给obj2新增一个属性x//2. 效果: 用obj2.x来代理obj1这个对象中的x//修改obj2.x的值,期望obj1.x也会跟着后面变化//数据代理:通过一个对象来代理另外一个对象中属性的操作[读/写]Object.defineProperty(obj2,&#x27;x&#x27;,&#123;get()&#123; return obj1.x&#125;,set(v)&#123; obj1.x = v; &#125;&#125;)&lt;/script&gt;\n\n \n\n\n4. vue中的数据代理\n&lt;div id=&quot;app&quot;&gt;&lt;h3&gt;地址:&#123;&#123;address&#125;&#125;&lt;/h3&gt;&lt;h3&gt;名称:&#123;&#123;name&#125;&#125;&lt;/h3&gt;&lt;/div&gt;&lt;script src=&quot;plugins/vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;const vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123;   address:&#x27;苏州&#x27;,   name:&#x27;admin&#x27; &#125;&#125;);console.log(vm)&lt;/script&gt;\n\n证明vm实例身上的_data就是js代码中的data,但是直接输入vm._data&#x3D;&#x3D;data报错\nVM269:1 Uncaught ReferenceError: data is not defined at &lt;anonymous&gt;:1:11\n\n技巧\n&lt;script&gt;let data = &#123; address:&#x27;苏州&#x27;, name:&#x27;admin&#x27;&#125;const vm = new Vue(&#123;el:&#x27;#app&#x27;,// data:data// 简写data&#125;);console.log(vm)&lt;/script&gt;\n\nvm._data&#x3D;&#x3D;data返回true\n原理\nObject.defineProperty(vm,&#x27;address&#x27;,&#123;get()&#123; return data中的address&#125;&#125;)vm.address实际上访问的就是data中的address\n\n\n图示\n\n\n\n虽然data就是_data,底层做了数据劫持[此处_data是对data功能上面做了升级的],数据是可以流向页面的.\n","tags":["vue2入门"]}]