<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo搭建技术</title>
    <url>/2023/07/12/hexo%E6%90%AD%E5%BB%BA%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="hexo-github搭建博客服务器"><a href="#hexo-github搭建博客服务器" class="headerlink" title="hexo+github搭建博客服务器"></a>hexo+github搭建博客服务器</h1><blockquote>
<ol>
<li>csdn,简书,有道笔记 - <strong>广告比较多</strong></li>
<li>hexo+github[比较慢,翻墙]&#x2F;gitee[Git pages服务器 - 维护]&#x2F;<strong>阿里云服务器</strong></li>
</ol>
</blockquote>
<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><blockquote>
<ol>
<li>非中文的非特殊字符的目录中[目录中不要出现空格或者带有特殊符号的]</li>
<li>D:&#x2F;node-v14.17.3-win-x64</li>
</ol>
</blockquote>
<h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><blockquote>
<ol>
<li><p>桌面计算机 - 右击 - 属性 - 高级系统设置 - 环境变量(N)</p>
</li>
<li><p>定位到下方的系统变量</p>
</li>
<li><p>定位到变量名 - Path - 编辑 - 新建</p>
</li>
<li><p>D:&#x2F;node-v14.17.3-win-x64</p>
</li>
<li><p>一定要关闭所有的环境变量配置的窗口 - 确定</p>
</li>
<li><p>打开终端[如果终端已经打开了,关闭 - 重新打开]</p>
<p>win[微软图标]+r - 输入cmd  - 输入如下指令检测nodejs是否配置成功</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"><span class="number">6</span>.<span class="number">14</span>.<span class="number">5</span> 出现版本号,则说明配置成功</span><br><span class="line">               </span><br><span class="line">如果出现了不是内部或者外部的命令的同学,请检查自己的nodejs解压缩之后的路径是否</span><br><span class="line">成功配置到了<span class="built_in">path</span>中</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h2 id="简单认识npm"><a href="#简单认识npm" class="headerlink" title="简单认识npm"></a>简单认识npm</h2><blockquote>
<p>npm是javascript的一个**包[前端框架]**管理工具,并且是nodejs平台默认的包管理工具.</p>
<p>通过npm可以安装,共享,分发代码,管理项目依赖关系.</p>
<p>类似于java中的maven或者gradle[强大的项目构建工具以及项目依赖管理工具]</p>
</blockquote>
<h2 id="npm简单使用"><a href="#npm简单使用" class="headerlink" title="npm简单使用"></a>npm简单使用</h2><h3 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h3><blockquote>
<p>为了下载速度变快,修改npm的镜像</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>验证一下,镜像是否成功修改了</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">https://<span class="title">registry.npm.taobao.org</span>/</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="简单使用-不需要操作"><a href="#简单使用-不需要操作" class="headerlink" title="简单使用 - 不需要操作"></a>简单使用 - 不需要操作</h2><blockquote>
<ol>
<li><p>下载bootstrap</p>
<p>npm install 框架名称  - 默认下载的是最新的版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install bootstrap@<span class="number">3</span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h1 id="Hexo官网"><a href="#Hexo官网" class="headerlink" title="Hexo官网"></a>Hexo官网</h1><blockquote>
<p><a class="link" href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<ol>
<li><p>假设你在D盘根目录下新建了一个文件夹hello-hexo[博客项目的根目录]</p>
</li>
<li><p>win+r - 打开终端</p>
</li>
<li><p>通过dos命令进入到hello-hexo目录中</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:/<span class="title">User</span>/<span class="title">admin</span>&gt;<span class="title">d</span>:</span></span><br><span class="line"><span class="function"><span class="title">D</span>:&gt;<span class="title">cd</span> <span class="title">hello</span>-<span class="title">hexo</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:/<span class="title">hello</span>-<span class="title">hexo</span>&gt;<span class="title">npm</span> <span class="title">install</span> <span class="title">hexo</span>-<span class="title">cli</span> -<span class="title">g</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h2 id="创建真正的博客目录"><a href="#创建真正的博客目录" class="headerlink" title="创建真正的博客目录"></a>创建真正的博客目录</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:/<span class="title">hello</span>-<span class="title">hexo</span>&gt;<span class="title">hexo</span> <span class="title">init</span> <span class="title">hello</span>-<span class="title">blog</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello-blog</span><br><span class="line"><span class="function">D:/<span class="title">hello</span>-<span class="title">hexo</span>/<span class="title">hello</span>-<span class="title">blog</span>&gt;<span class="title">npm</span> <span class="title">install</span></span></span><br></pre></td></tr></table></figure>

<h2 id="测试-启动博客服务器"><a href="#测试-启动博客服务器" class="headerlink" title="测试 - 启动博客服务器"></a>测试 - 启动博客服务器</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:/<span class="title">hello</span>-<span class="title">hexo</span>/<span class="title">hello</span>-<span class="title">blog</span>&gt;<span class="title">hexo</span> <span class="title">s</span></span></span><br></pre></td></tr></table></figure>

<p><code>关闭服务器</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ctrl+c</span><br></pre></td></tr></table></figure>

<p><em><strong>打开浏览器输入:localhost:4000</strong></em></p>
<h2 id="常用主题模板"><a href="#常用主题模板" class="headerlink" title="常用主题模板"></a>常用主题模板</h2><blockquote>
<p><a class="link" href="https://blog.csdn.net/zgd826237710/article/details/99671027">https://blog.csdn.net/zgd826237710/article/details/99671027<i class="fas fa-external-link-alt"></i></a></p>
<p>使用git命令来进行克隆,需要提前安装好git,检测git是否安装成功,<strong>重新打开终端</strong></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="注册码云账号"><a href="#注册码云账号" class="headerlink" title="注册码云账号"></a>注册码云账号</h2><blockquote>
<p>推荐用QQ注册一下</p>
<p>本地配置码云账号信息 - 配置文件 - 位置windows的用户主目录下</p>
<p>C:&#x2F;User&#x2F;计算机用户名 - 观察是否存在**.gitconfig**文件,添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">	email = 码云的QQ邮箱</span><br><span class="line">	name = 用户名</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="安装模板"><a href="#安装模板" class="headerlink" title="安装模板"></a>安装模板</h2><blockquote>
<p>通过cmd进入到hello-blog目录中的themes目录中</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:/<span class="title">hello</span>-<span class="title">hexo</span>/<span class="title">hello</span>-<span class="title">blog</span>&gt;<span class="title">cd</span> <span class="title">themes</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>://<span class="title">hello</span>-<span class="title">hexo</span>/<span class="title">hello</span>-<span class="title">blog</span>/<span class="title">themes</span>&gt;<span class="title">git</span> <span class="title">clone</span> <span class="title">https</span>://<span class="title">gitee.com</span>/<span class="title">guancg</span>/<span class="title">hexo</span>-<span class="title">theme</span>-<span class="title">pure.git</span></span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>或者直接从github上直接clone</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/cofess/hexo-theme-pure.git</span><br></pre></td></tr></table></figure>



<h1 id="更新主题配置"><a href="#更新主题配置" class="headerlink" title="更新主题配置"></a>更新主题配置</h1><blockquote>
<ol>
<li><p>指定新的主题</p>
<p>hello-blog目录下的_config.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-pure</span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>重启服务器hexo s</li>
</ol>
</blockquote>
<h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><p>hexo-theme-pure&#x2F;_config.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">overriden</span></span><br><span class="line">  <span class="attr">author:</span> </span><br><span class="line">  <span class="attr">author_title:</span> <span class="string">高级打字员</span></span><br><span class="line">  <span class="attr">author_description:</span> <span class="string">个人简介。</span></span><br><span class="line">  <span class="attr">location:</span> </span><br></pre></td></tr></table></figure>

<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><blockquote>
<p>语法的编辑器 - <a class="link" href="https://typora.io/">https://typora.io/<i class="fas fa-external-link-alt"></i></a></p>
<p>文件的后缀是md</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">常用语法如下:</span><br><span class="line"></span><br><span class="line">1. 标题的语法:</span><br><span class="line">1~6标题 - # 一级标题    ## 二级标题   </span><br><span class="line"></span><br><span class="line">2. 代码块 - java,js,mysql...</span><br><span class="line"></span><br><span class="line">​~~~java 敲enter键</span><br><span class="line"></span><br><span class="line">3. 列表</span><br><span class="line">3-1. 无序列表</span><br><span class="line">     * 列表名称</span><br><span class="line">     </span><br><span class="line">     有序列表</span><br><span class="line">     1. 列表名称</span><br><span class="line">     </span><br><span class="line">4. 高亮显示</span><br><span class="line">   `高亮显示内容`</span><br><span class="line">   </span><br><span class="line">5. 加粗字体</span><br><span class="line">   **粗体**</span><br><span class="line">   </span><br><span class="line">6. 斜体</span><br><span class="line">   *斜体*</span><br><span class="line">   </span><br><span class="line">7. 粗+斜</span><br><span class="line">   ***粗斜***</span><br><span class="line">   </span><br><span class="line">8. 段落</span><br><span class="line">   &gt; 空格</span><br><span class="line">   </span><br><span class="line">9. 引入外部图片</span><br><span class="line">   ![](xx.png)</span><br><span class="line">   </span><br><span class="line">10. 表格</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D://<span class="title">hello</span>-<span class="title">hexo</span>/<span class="title">hello</span>-<span class="title">blog</span>&gt;<span class="title">hexo</span> <span class="title">n</span> <span class="title">java</span></span></span><br></pre></td></tr></table></figure>

<p>效果:hello-blog目录下的source&#x2F;_ports&#x2F;自动生成一个java.md文件</p>
<p>重启blog服务器</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D://<span class="title">hello</span>-<span class="title">hexo</span>/<span class="title">hello</span>-<span class="title">blog</span>&gt;<span class="title">hexo</span> <span class="title">s</span></span></span><br></pre></td></tr></table></figure>



<h1 id="主题的侧边栏"><a href="#主题的侧边栏" class="headerlink" title="主题的侧边栏"></a>主题的侧边栏</h1><blockquote>
<p>侧边栏的链接生效</p>
<p>将&#x2F;hello-blog&#x2F;themes&#x2F;hexo-theme-pure&#x2F;_source&#x2F;下的除了_data文件夹,其余文件夹</p>
<p>拷贝一份放入到hello-blog目录下的source目录中即可</p>
</blockquote>
<h1 id="文章的分类和标签"><a href="#文章的分类和标签" class="headerlink" title="文章的分类和标签"></a>文章的分类和标签</h1><blockquote>
<p>只需要在文章的.md文件的自动生成的头部添加</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">title: java</span><br><span class="line">date: 2021-07-13 08:44:42</span><br><span class="line">categories: java</span><br><span class="line">tags: java</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="博客的语言环境设置"><a href="#博客的语言环境设置" class="headerlink" title="博客的语言环境设置"></a>博客的语言环境设置</h1><blockquote>
<p>设置中文</p>
<p>hello-blog下的_config.yml文件中</p>
<p>language: zh-CN</p>
</blockquote>
<h1 id="图片显示问题"><a href="#图片显示问题" class="headerlink" title="图片显示问题"></a>图片显示问题</h1><blockquote>
<ol>
<li><p>安装插件 - npm install hexo-asset-img –save</p>
</li>
<li><p>需要到hello-blog&#x2F;_config.yml文件中进行配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hexo n 机器学习</p>
<p><code>效果就是除了生成了机器学习.md还有一个机器学习文件夹,那么这篇文章的所有的图片就可以存储在机器学习文件夹中</code></p>
</li>
<li><p>hexo s</p>
</li>
</ol>
</blockquote>
<h1 id="内置搜索的功能"><a href="#内置搜索的功能" class="headerlink" title="内置搜索的功能"></a>内置搜索的功能</h1><blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">insight:</span> <span class="literal">true</span> <span class="comment"># you need to install `hexo-generator-json-content` before using Insight Search</span></span><br><span class="line"><span class="attr">baidu:</span> <span class="literal">false</span> <span class="comment"># you need to disable other search engines to use Baidu search</span></span><br></pre></td></tr></table></figure>

<p>安装内置搜索插件</p>
<p>npm i -S hexo-generator-json-content</p>
</blockquote>
<h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><blockquote>
<p>不需要本地数据库进行存储的,用的是第三方的.</p>
<p>LeanCloud - 官网地址 - <a class="link" href="https://www.leancloud.cn/">https://www.leancloud.cn/<i class="fas fa-external-link-alt"></i></a></p>
<p>注册 - 登录 - 控制台 - 创建应用 - 右下设置 - 应用凭证</p>
<p>appId - sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz</p>
<p>appKey - 3hn4ijEgSzJeRV4nkmXThmGV</p>
</blockquote>
<p><code>在hexo-theme-pure\_config.yml文件中配置</code></p>
<blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span> <span class="comment"># Valine. https://valine.js.org</span></span><br><span class="line"> <span class="attr">appid:</span> <span class="string">sljUq97vUAdLAo7XQdf13aFR-gzGzoHsz</span>  <span class="comment"># your leancloud application appid</span></span><br><span class="line"> <span class="attr">appkey:</span> <span class="string">3hn4ijEgSzJeRV4nkmXThmGV#</span> <span class="string">your</span> <span class="string">leancloud</span> <span class="string">application</span> <span class="string">appkey</span></span><br><span class="line"> <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"> <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"> <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"> <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"> <span class="attr">meta:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"> <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line"> <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>#字数统计&amp;阅读时长</p>
<blockquote>
<ol>
<li><p>npm i -S hexo-wordcount</p>
</li>
<li><p>hexo-theme-pure_config.yml文件中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">postCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span>  <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>  <span class="comment"># 阅读时长预计 </span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h1 id="附件-优秀插件"><a href="#附件-优秀插件" class="headerlink" title="附件-优秀插件"></a>附件-优秀插件</h1><blockquote>
<ol>
<li><p>显示图片</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install https://gitee.com/guancg/hexo-asset-image.git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>内置搜索</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i -S hexo-generator-json-content</span><br></pre></td></tr></table></figure>
</li>
<li><p>字数统计&amp;阅读时长</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm i -S hexo-wordcount</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li><p>github部署</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h1 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h1><blockquote>
<p>git config –global user.name “github用户名” </p>
<p>git config –global user.email “github邮箱”</p>
</blockquote>
<blockquote>
<p>github.com</p>
</blockquote>
<blockquote>
<p>chrome浏览器 + iguge - <a class="link" href="https://iguge.app/">https://iguge.app/<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<blockquote>
<p>新建的仓库的名称必须是<strong>guancgsuccess.github.io</strong></p>
<p>仓库地址 - <a class="link" href="https://github.com/guancgsuccess/guancgsuccess.github.io.git">https://github.com/guancgsuccess/guancgsuccess.github.io.git<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<blockquote>
<p>安装github部署插件</p>
<p>npm install hexo-deployer-git –save</p>
</blockquote>
<blockquote>
<p>hello-blog&#x2F;_config.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">&#x27;https://github.com/guancgsuccess/guancgsuccess.github.io.git&#x27;</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>hexo三连操作</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>













































]]></content>
  </entry>
  <entry>
    <title>java01day</title>
    <url>/2023/07/18/java01day/</url>
    <content><![CDATA[<h1 id="java介绍"><a href="#java介绍" class="headerlink" title="java介绍"></a>java介绍</h1><ol>
<li><p>爪哇 - 印度尼西亚的爪哇岛 - 盛产咖啡豆</p>
</li>
<li><p>前身叫做Oak语言 - 橡树,这个商标被一家显卡制造商提前注册了.</p>
</li>
<li><p>Java之父 - James Gosling  - 詹姆斯 高斯林(搞死你)</p>
</li>
<li><p>原先是属于SUN(太阳)公司 - 优先被IBM公司 - “讨好sun公司 - eclipse(免费) - 日食”</p>
<p><code>sun不乐意 - 打官司 - 打输了</code></p>
</li>
<li><p>oracle公司[甲骨文] - 特殊的数据库产品[oracle] - 2019年以74亿美金收购的.</p>
</li>
<li><p>官网:<a class="link" href="http://www.oracle.com/">www.oracle.com<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>java语言是1995年5月23日正式诞生的.</p>
</li>
</ol>
<h1 id="java的三个体系"><a href="#java的三个体系" class="headerlink" title="java的三个体系"></a>java的三个体系</h1><ol>
<li>javase(j2se) - java standard edition - java标准版 - 包含了java的基础语法 - 传统的适合桌面应用程序的开发.</li>
<li>javaee(j2ee) - 更名了 - Jakarta 雅加达EE .. java enterprise edition - java企业版</li>
<li>javame(j2me) - java micro edition - java微型版 - 适合移动端的开发 - “夭折了”</li>
</ol>
<h1 id="java的特点"><a href="#java的特点" class="headerlink" title="java的特点"></a>java的特点</h1><blockquote>
<ol>
<li>简单易学</li>
<li><strong>跨(os)平台</strong> - 可移植性 - 与平台无关性</li>
<li>安全性 - 健壮性 &#x3D;&gt; 不需要维护指针</li>
<li>动态的语言 - <strong>解释型的语言</strong></li>
<li>多线程</li>
<li>分布式</li>
</ol>
</blockquote>
<h1 id="jdk下载地址"><a href="#jdk下载地址" class="headerlink" title="jdk下载地址"></a>jdk下载地址</h1><blockquote>
<p><a class="link" href="https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html">https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html<i class="fas fa-external-link-alt"></i></a></p>
<p>jdk的版本 -   jdk1.0 ….    <strong>jdk5.0[巨变]</strong> …  jdk7.x[变化] -  <strong>jdk8.x[目前最主流的]</strong> .. jdk11.x …   <em><strong>jdk17.x[趋势]</strong></em></p>
</blockquote>
<blockquote>
<p>jdk - java development kit - java开发工具包 - 针对开发者使用的.</p>
</blockquote>
<hr>
<h2 id="jdk17环境变量配置"><a href="#jdk17环境变量配置" class="headerlink" title="jdk17环境变量配置"></a>jdk17环境变量配置</h2><blockquote>
<ol>
<li><p>解压到一个非中文的,不能带有特殊符号(比如空格)的目录.</p>
</li>
<li><p>桌面 - 计算机 - 右击属性 - 高级系统设置 - 环境变量 - 定位到<code>系统变量</code></p>
<ul>
<li><p>新建</p>
<p>变量名 JAVA_HOME</p>
<p>变量值 &#x2F;Users&#x2F;admin&#x2F;Downloads&#x2F;jdk-17.0.6(<code>自己电脑的jdk解压之后的绝对路径</code>)</p>
</li>
<li><p>找到内置的系统变量 - Path - 点击编辑 - 点击新建</p>
<p>%JAVA_HOME%\bin</p>
</li>
</ul>
</li>
<li><p>点击 - 确定 - 关闭所有的设置窗口</p>
</li>
<li><p>然后打开终端win+r - 输入cmd,<code>如果在进行环境变量设置之前,已经打开了终端,那么重启这个终端</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line">   </span><br><span class="line">java version &quot;<span class="number">17</span>.<span class="number">0</span>.<span class="number">6</span>&quot; <span class="number">2023</span>-<span class="number">01</span>-<span class="number">17</span> LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">17</span>.<span class="number">0</span>.<span class="number">6</span>+<span class="number">9</span>-LTS-<span class="number">190</span>)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">17</span>.<span class="number">0</span>.<span class="number">6</span>+<span class="number">9</span>-LTS-<span class="number">190</span>, mixed <span class="built_in">mode</span>, sharing)</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<h1 id="java的执行原理"><a href="#java的执行原理" class="headerlink" title="java的执行原理"></a>java的执行原理</h1><blockquote>
<p>jdk的解压之后的bin目录 - .exe结尾的都是开发工具.比较重要的<strong>javac.exe和java.exe</strong></p>
<ol>
<li>javac.exe - 将java源代码<strong>编译</strong>成字节码文件</li>
<li>java.exe - <strong>运行</strong>这个字节码文件[运行java程序]</li>
</ol>
</blockquote>
<hr>
<blockquote>
<ol>
<li><p>在桌面 - 右击新建一个文件 - HelloWorld.java(类文件)</p>
<p><code>确保计算机中的文件的后缀扩展名要显示的 - 磁盘 - 工具 - 扩展名打钩</code></p>
<p><code>否则可能创建出来的文件HelloWorld.java.txt文件</code></p>
</li>
<li><p>打开文件,进行编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释 - 注释的代码是不会经过编译器进行编译的 =&gt; 程序员看的.</span></span><br><span class="line"><span class="comment">//public(公开的)和class(类)都是属于关键字 =&gt; 定义类</span></span><br><span class="line"><span class="comment">//此处的HelloWorld就是类名,类名必须和文件名高度保持一致.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">  <span class="comment">//程序的主入口 - &quot;大门&quot;</span></span><br><span class="line">  <span class="comment">// main方法 - &quot;死记住语法&quot;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  	<span class="comment">//方法体 - 现阶段 - 写代码的地方</span></span><br><span class="line">    <span class="comment">//在控制台输出一句话</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意:在整个编码环节中,所有的符号必须是英文模式下的.</span></span><br><span class="line">    <span class="comment">//java代码一行结束之后必须使用;</span></span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过终端(win+r &#x3D;&gt; cmd)进入到桌面</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">User/计算机名 - 用户的主目录</span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">C:\<span class="title">User</span>\计算机名&gt;<span class="title">cd</span> <span class="title">Desktop</span></span></span><br><span class="line"><span class="function">   </span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li><p><strong>编译</strong>整个java源代码文件[以.java为后缀的文件]</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">User</span>\计算机名\<span class="title">Desktop</span>&gt;<span class="title">javac</span> <span class="title">HelloWorld.java</span></span></span><br></pre></td></tr></table></figure>

<p><code>效果:只要语法没有问题,就会编译生成一个.class的字节码文件</code></p>
</li>
<li><p>运行的字节码文件</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">User</span>\计算机名\<span class="title">Desktop</span>&gt;<span class="title">java</span> <span class="title">HelloWorld</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<p>总结: java程序的执行的基本原理:</p>
<ol>
<li><p>编写好程序之后,当执行javac.exe命令的时候,本质上是调用jdk中的编译器,将.java源代码文件编译成一个.class的字节码文件</p>
<p><code>为什么需要编译呢? - 因为计算机是不能够直接识别java语言编写的程序.</code></p>
</li>
<li><p>当执行java.exe命令的时候,本质上是调用jvm中的解释器,它会将.class字节码文件逐行翻译成机器语言.</p>
<p><code>jvm - java虚拟机 - 想象成是以.class字节码文件为指令的cpu</code></p>
</li>
</ol>
<h2 id="基本原理图"><a href="#基本原理图" class="headerlink" title="基本原理图"></a>基本原理图</h2><p>![]<img src="/2023/07/18/java01day/java执行原理.png" style="zoom:;"></p>
<ol>
<li><p>.class字节码文件是在java虚拟机中执行的.</p>
</li>
<li><p>一次编译,到处执行 - <strong>跨(os)平台</strong> - 可移植性 - 与平台无关性</p>
</li>
<li><p>JVM的位置在java语言开发好的应用程序与底层的os之间的那一层.  jvm安装在os上的.  正是因为有了jvm,所以java才具备跨平台性.</p>
</li>
<li><p>jvm是不跨平台的.</p>
</li>
<li><p>jvm类似于”翻译官的角色”</p>
</li>
</ol>
<p>​				 java-app - 中国人说的话</p>
<p>|  胖翻译 (jvm)                            |毛翻译(jvm)</p>
<p>鬼子 (os)                                     老毛子(os)</p>
<ol start="6">
<li><p>思考 - java到底是属于编译型语言,还是属于解释型语言,还是属于半编译半解释型语言? - <strong>解释型</strong></p>
<p>C语言是属于编译型语言 - 编译型的真正的含义: 将开发语言编写好的程序可以一次性直接编译成我们os能够识别的语言.</p>
<p>比如c语言的开发的程序可以一次性直接编译成二进制可执行文件, 常见的.exe文件.</p>
<p>C语言不跨平台 - 特点: 一次编写,到处运行.  </p>
</li>
<li><p>为什么java的运行速度没有C快???</p>
<ul>
<li>每次执行java.exe命令的时候,都会对.class文件进行逐行翻译.</li>
<li>C是一次性编译ok,后面直接运行的程序.</li>
</ul>
<p>举例:  java执行 - 类似于 “点读笔”,   C执行-&gt;一次翻译好了中文</p>
</li>
</ol>
<h1 id="类命名的规范"><a href="#类命名的规范" class="headerlink" title="类命名的规范"></a>类命名的规范</h1><blockquote>
<p>类是java的基本单元.</p>
<ol>
<li><p>必须要遵守的</p>
<ul>
<li><p>类名只能由字母 or 数字 or 下划线 or $组成,但是不能由数字开头.</p>
</li>
<li><p>类名不能是java中的关键字(<code>关键字</code> - 某些含有语法含义的单词)</p>
<p><code>if,for,byte,short,int,long ,float,double,char,enum...</code></p>
</li>
<li><p>类名不能是java中内置的<strong>对象类型</strong>(比如System,String,Scanner,Date…)</p>
</li>
<li><p>类名同样不能是以下三个字面量,true,false,null</p>
</li>
<li><p>类名不能是java中的保留关键字goto</p>
</li>
</ul>
</li>
<li><p>推荐遵守</p>
<ul>
<li><p>类名采用”大驼峰” - 首字母要大写,其余单词小写.如果类名由多个单词组成,每个单词的首字母都要大写.</p>
<p>比如HelloWorld,StudentSystem…</p>
</li>
<li><p>不推荐使用中文.防止出现中文乱码问题.</p>
</li>
<li><p>不能使用中文拼音</p>
</li>
<li><p>提倡见名知意 - 提高程序的可读性.</p>
</li>
</ul>
</li>
</ol>
</blockquote>
<hr>
<h1 id="jdk和jvm以及jre"><a href="#jdk和jvm以及jre" class="headerlink" title="jdk和jvm以及jre"></a>jdk和jvm以及jre</h1><blockquote>
<p>三者之间的区别和联系</p>
</blockquote>
<blockquote>
<ol>
<li><p>jvm - java virtual machine - java虚拟机 - 跨平台 - 本身就是C语言写的.</p>
</li>
<li><p>jre - Java Runtime Environment - java运行时环境,针对java程序的使用者来讲的.</p>
<p>如果仅仅只是想要运行一个java开发好的程序,那么只需要在计算机中安装jre即可.</p>
<p>jre包括一些核心的内库以及jvm,所以jre是包括jvm</p>
<p>jre &#x3D; 核心内库 + jvm</p>
</li>
<li><p>jdk - java development kit - java开发工具包 - 包括一些开发工具javac.exe,java.exe,jar.exe,javadoc.exe,javap.exe等等</p>
<p>针对开发者使用的.jdk包括开发工具以及jre,所以jdk &#x3D; 开发工具 + jre</p>
</li>
</ol>
</blockquote>
<hr>
<h1 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h1><blockquote>
<p>包对于类的作用就类似于文件夹对文件的作用 - 对类文件进行分类管理的.在磁盘中就是一个文件夹.</p>
<p>企业中对包的命名规范</p>
<ol>
<li><p>个人发布的,但是不是独立完成的.</p>
<p>indi.发布者名称.项目名称.模块名称</p>
</li>
<li><p>个人发布 - 个人独立完成的</p>
<p>pers.个人名称.项目名称.模块名称</p>
</li>
<li><p>个人完成 - 但是没有公开的</p>
<p>pri.个人名称.项目名称.模块名称</p>
</li>
<li><p>团队项目</p>
<p>team.项目名称.模块名称</p>
</li>
<li><p>公司项目 - 一般是采用公司域名倒置的写法.比如百度 - com.baidu.</p>
<p>tech.aistar</p>
</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>包的命名规范</p>
<ol>
<li><p>可以有数字或者字母开头</p>
</li>
<li><p>可以由数字,字母,下划线还有$组成.</p>
</li>
<li><p>不能是java中的关键字</p>
</li>
<li><p>不能包含java单词.</p>
</li>
<li><p>如果包名有多个层次,推荐采用小写字母,并且各个单词之间用.隔开.</p>
</li>
<li><p>一旦有了包存在,那么类文件中的首行就会出现声明包的语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.aistar.day01;<span class="comment">//must be first line</span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h1 id="java中三种注释"><a href="#java中三种注释" class="headerlink" title="java中三种注释"></a>java中三种注释</h1><blockquote>
<ol>
<li><p>单行注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解释单行的代码</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多行注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       多行注释</span></span><br><span class="line"><span class="comment">       多行注释</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>文档注释 - 后期学习了javadoc.exe(生成我们的api文档) - 文档注释都是可以生效的.</p>
<ol>
<li>负责解释类的作用</li>
<li>负责解释方法的作用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本来用来演示: HelloWorld</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> success</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/7/17 14:31:25</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<h1 id="关于main方法中的虚拟机参数"><a href="#关于main方法中的虚拟机参数" class="headerlink" title="关于main方法中的虚拟机参数"></a>关于main方法中的虚拟机参数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">     System.out.println(args[i]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常编译javac HelloWorld.java</p>
<p>运行并且进行传参java Hello 我们 123 abc</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote>
<p><strong>java中是采用数据类型和变量来定义和存储数据的</strong>.<code>并且所有的基本类型都是存在在jvm内存的栈区</code></p>
<p><code>栈区特点 - 先进后出 - 读写速度比较快</code></p>
<p><code>速度快的本质 - java是一门强类型的语言 - 在编译期间就必须要确定变量的数据类型</code></p>
<p>不同的数据类型所占的内存的大小是不一样的.编译期间确定好的类型,不能够改变了.势必会造成空间的浪费.空间一旦浪费,时间[效率]就会提高 - 以空间换时间…</p>
</blockquote>
<blockquote>
<p>java中数据类型分成两大类</p>
<ol>
<li><p>基本数据类型</p>
<ul>
<li><p>比较主流的说法是<strong>八种</strong></p>
<p>byte,short,int,long,float,double,char,boolean</p>
</li>
<li><p>编程思想 - 把void归纳为基本数据类型 - 九种</p>
</li>
</ul>
</li>
<li><p>对象类型(无数种) - 包括内置对象类型以及自定义对象类型</p>
</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>针对八种基本数据类型</p>
<table>
<thead>
<tr>
<th></th>
<th>名称</th>
<th>字节数&#x2F;位数</th>
<th>范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>字节</td>
<td>1个字节 - 8bit</td>
<td>[-128,127]</td>
<td>0</td>
</tr>
<tr>
<td>short</td>
<td>短整型</td>
<td>2个字节 - 16bit</td>
<td>[-2^15,2^15-1]</td>
<td>0</td>
</tr>
<tr>
<td>int</td>
<td>整型</td>
<td>4个字节 - 32bit</td>
<td>[-2^31,2^31-1]</td>
<td>0</td>
</tr>
<tr>
<td>long</td>
<td>长整型</td>
<td>8个字节 - 64bit</td>
<td>[-2^61,2^61-1]</td>
<td>0L</td>
</tr>
<tr>
<td>float</td>
<td>单精度浮点数</td>
<td>4个字节 - 32bit</td>
<td>-3.4<em>10^38 - 3.4</em>10^38</td>
<td>0.0f</td>
</tr>
<tr>
<td>double</td>
<td>双精度浮点数</td>
<td>8个字节 - 64bit</td>
<td>-1.7<em>10^308 , 1.7</em>10^308</td>
<td>0.0d</td>
</tr>
<tr>
<td>char</td>
<td>字符</td>
<td>2个字节- 16bit</td>
<td>[\u0000,\uffff]或者[0,65535]</td>
<td>\u0000,空(“”)</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔类型</td>
<td>1个字节 - 8bit</td>
<td>true&#x2F;false</td>
<td>false</td>
</tr>
</tbody></table>
</blockquote>
<h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><blockquote>
<p>参考类名 - 唯一的不同点 - “小驼峰命名” - - 首字母要小写,其余单词小写.如果类名由多个单词组成,每个单词的首字母都要大写.</p>
<p>类名,包名,变量名,方法名,接口名 &#x3D;&gt; 标识符</p>
</blockquote>
<h2 id="定义变量的语法"><a href="#定义变量的语法" class="headerlink" title="定义变量的语法"></a>定义变量的语法</h2><blockquote>
<ol>
<li><p>数据类型 变量名 [&#x3D; 初始值];</p>
</li>
<li><p>可以先定义变量,然后进行赋值,并且可以多次赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>变量在使用之前必须要先初始化&#x2F;定义.</li>
<li>同{}中不能出现同名的变量</li>
<li>变量仅仅能在自己所在的{}中使用,这是变量的使用作用域的概念</li>
</ol>
</blockquote>
<h2 id="变量的赋值方式"><a href="#变量的赋值方式" class="headerlink" title="变量的赋值方式"></a>变量的赋值方式</h2><blockquote>
<ol>
<li><p>定义变量的同时进行赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>先定义变量,然后再进行赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过表达式进行赋值.<code>表达式 - 由变量或者字面量以及运算符能组成的合法的语句</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span>  <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a + <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>链式赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x,y,z = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//仅仅是对z赋值了,x和y仅仅是定义了,尚未初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同时声明了n个变量</span></span><br><span class="line"><span class="type">int</span> t1,t2,t3;</span><br><span class="line">t1 = t2 = t3 = <span class="number">90</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过方法进行赋值</p>
</li>
</ol>
</blockquote>
<hr>
<h1 id="类型的转换"><a href="#类型的转换" class="headerlink" title="类型的转换"></a>类型的转换</h1><ol>
<li><p>支持自动类型的转换 - 小的数据类型可以自动转换成大的数据类型</p>
<p>byte-&gt;short-&gt;int-&gt;long</p>
<p>char-&gt;int</p>
<p>int-&gt;double</p>
</li>
</ol>
<hr>
]]></content>
      <tags>
        <tag>一点笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql入门</title>
    <url>/2023/07/12/mysql/</url>
    <content><![CDATA[<h1 id="怎么学习"><a href="#怎么学习" class="headerlink" title="怎么学习"></a>怎么学习</h1><blockquote>
<ol>
<li>听懂(100%)</li>
<li>多看bug - 多看问题</li>
<li>练打字 - 多敲</li>
</ol>
</blockquote>
<hr>
<h1 id="人机交互"><a href="#人机交互" class="headerlink" title="人机交互"></a>人机交互</h1><blockquote>
<ol>
<li>CLI (Command Line Interface) - 命令行方式 - 需要记忆大量的dos命令,比较繁琐</li>
<li>GUI(Graphical User Interface) - 用户界面方式 - “傻瓜式操作”</li>
<li>可执行程序xx.exe文件[C语言编写之后直接编译的程序],如果以后双击它之后,如果闪退,说明计算机告诉你,只能采用CLI</li>
</ol>
</blockquote>
<h1 id="为什么要进行环境变量的配置"><a href="#为什么要进行环境变量的配置" class="headerlink" title="为什么要进行环境变量的配置"></a>为什么要进行环境变量的配置</h1><blockquote>
<ol>
<li><p><strong>win+r</strong> - 输入cmd</p>
<p><code>cmd窗口,dos窗口,黑窗口,终端</code></p>
</li>
<li><p>输入命令notepad - 成功唤醒记事本的程序</p>
<p>接着输入命令 - success - 报错,大概的意思就是<strong>不是系统内部或者外部的命令</strong></p>
</li>
<li><p>windows系统执行命令的顺序</p>
<ul>
<li><p>优先到当前目录下去查找是否存在这个命令(notepad.exe).</p>
</li>
<li><p>如果不存在,继续查找环境变量Path中的路径是否包含这个命令所在的目录</p>
<p>cmd窗口中输入path - 查找C:\WINDOWS</p>
</li>
</ul>
</li>
<li><p>到C盘WINDOWS目录中去查找是否存在notepad.exe&#x2F;NOTEPAD.exe</p>
</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>思考 - 在我们没有对mysql进行环境变量配置之前,想用使用mysql.exe命令???</p>
<p>只能手动采用dos命令进入到mysql的bin目录</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">User</span>\<span class="title">admin</span>&gt;<span class="title">d</span>:</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\&gt;<span class="title">cd</span> <span class="title">temp</span></span></span><br></pre></td></tr></table></figure>

<p><code>cd - change direcotry</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">temp</span>\&gt;<span class="title">cd</span> <span class="title">mysql</span>-8.0.32-<span class="title">winx64</span></span></span><br></pre></td></tr></table></figure>

<p><code>具体的目录名不需要敲全了,敲几个前缀 + tab键</code></p>
<p>继续进入到终点的目录bin</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">temp</span>\<span class="title">mysql</span>-8.0.32-<span class="title">winx64</span>&gt;<span class="title">cd</span> <span class="title">bin</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">temp</span>\<span class="title">mysql</span>-8.0.32-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysql</span></span></span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1. 安装mysql"></a>1. 安装mysql</h1><blockquote>
<p>版本要求:至少是5.7&#x2F;8.x</p>
</blockquote>
<blockquote>
<ol>
<li><p>官方下载 - <a class="link" href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>下载解压缩到一个<code>合法的目录</code></p>
<blockquote>
<p>目录名不要带有中文,不要带有特殊符号(Program File(x86))</p>
</blockquote>
</li>
<li><p><strong>进行一个环境变量的配置</strong></p>
<blockquote>
<ol>
<li><p>右击计算机 - 属性 - 高级系统设置 - 环境变量 - 系统变量</p>
</li>
<li><p>定位到默认的自带的内置的变量名Path - 编辑 - 新建</p>
<p>然后将mysql的bin目录的绝对地址拷贝进去即可.</p>
</li>
<li><p><strong>以后只要环境变量进行了设置 - 应用 - 确定 - 关闭所有的设置窗口</strong></p>
<p><strong>一定要重启cmd窗口</strong></p>
</li>
<li><p>重新打开cmd - 输入mysql看是否生效</p>
</li>
</ol>
</blockquote>
</li>
<li><p>解压之后的目录中新建一个文件my.ini文件</p>
<p>(注意点: windows - 工具栏 - 显示计算机扩展名&#x2F;后缀名 - 勾选)</p>
</li>
<li><p>编辑my.ini文件</p>
<p><code>唯一需要修改的只有basedir,把它修改成自己的mysql-8.0.32-winx64的绝对地址</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line">       </span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\web\\mysql-<span class="number">8.0</span>.<span class="number">11</span></span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line"><span class="comment"># datadir=C:\\web\\sqldata</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">20</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<blockquote>
<ol start="6">
<li><p>以<strong>管理员身份打开 cmd 命令行工具</strong>，切换目录 - 进入到bin目录</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">temp</span>\<span class="title">mysql</span>-8.0.32-<span class="title">winx64</span>\<span class="title">bin</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化数据库</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">temp</span>\<span class="title">mysql</span>-8.0.32-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> --<span class="title">initialize</span> --<span class="title">console</span></span></span><br></pre></td></tr></table></figure>

<p><code>1. 分配一个默认的密码</code></p>
<p><code>2. mysql-8.0.32-winx64是否自动生成了data目录</code></p>
</li>
<li><p>安装mysqld</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">temp</span>\<span class="title">mysql</span>-8.0.32-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> <span class="title">install</span></span></span><br></pre></td></tr></table></figure>

<p><code>检测一下mysql的服务是否安装成功</code> - 右击计算机 - 管理 - 服务 - 服务和应用程序 - 右边的窗口 - MYSQL</p>
<p>只有mysql服务处于正在执行的状态,那么mysql才能够正常使用,建议右击MYSQL属性 - 设置成开机自动启动.</p>
</li>
<li><p>启动mysql</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">temp</span>\<span class="title">mysql</span>-8.0.32-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">net</span> <span class="title">start</span> <span class="title">mysql</span></span></span><br></pre></td></tr></table></figure>

<p><code>mysql服务的运行状态 - 正在运行中</code></p>
</li>
<li><p>登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\temp\mysql-8.0.32-winx64\bin&gt;mysql -uroot -p临时密码</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>如果临时密码使用不了</p>
<ol>
<li><p>关闭mysql服务关闭</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">重新打开<span class="built_in">cmd</span></span><br><span class="line"><span class="function">C:\<span class="title">User</span>\<span class="title">admin</span>&gt;<span class="title">net</span> <span class="title">stop</span> <span class="title">mysql</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除data目录</p>
</li>
<li><p>mysqld –initialize –console以及net start mysql再登录.</p>
</li>
</ol>
</blockquote>
<hr>
<blockquote>
<ol start="5">
<li><p>直接修改密码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;root&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出mysql登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新登录即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<h1 id="2-pre-mysql体系"><a href="#2-pre-mysql体系" class="headerlink" title="2-pre.mysql体系"></a>2-pre.mysql体系</h1><blockquote>
<ol>
<li><p>sql语句(ddl,dml,dcl,tcl,dql)的使用 - 专门用来操作关系型数据库的.</p>
<ul>
<li>互联网项目对sql的要求是降低的 - 基于单表sql开发的模式</li>
<li>传统行业对sql的要求是高的.</li>
</ul>
</li>
<li><p>视图,存储过程,<strong>索引(B+树)</strong>,事务,函数,表(基本单位),用户 - 数据库的单位&#x2F;对象</p>
</li>
<li><p>应用架构</p>
<ul>
<li><p>单体架构 - 单台计算机仅仅只有一个mysql节点 - 适合小型的项目</p>
</li>
<li><p>主从复制架构 - 至少是2个节点,主节点负责写入,从节点读取.</p>
<p>难点 - 主从的数据的同步问题 - 适合中小型项目</p>
</li>
<li><p>集群 - 适合大型的项目,为了解决三高问题.<em><strong>高性能,高并发,高可用.</strong></em></p>
</li>
</ul>
</li>
</ol>
</blockquote>
<hr>
<h1 id="2-mysql介绍"><a href="#2-mysql介绍" class="headerlink" title="2. mysql介绍"></a>2. mysql介绍</h1><blockquote>
<ol>
<li>mysql属于瑞典的Mysql AB公司的,隶属于Oracle(甲骨文,主打的产品oracle数据库)旗下产品.</li>
<li>mysql特点 - 体积小,速度快,特别适合中小型企业,开源,免费的.分成社区版和商业版.</li>
<li>市面上主流的<strong>关系型数据库</strong> - mysql,oracle,sqlserver(MS-微软)</li>
<li>mysql软件也是采用c&#x2F;c++编写的.</li>
</ol>
</blockquote>
<h1 id="3-专业术语"><a href="#3-专业术语" class="headerlink" title="3. 专业术语"></a>3. 专业术语</h1><blockquote>
<ol>
<li><p>DB - database 数据库 - 将数据按照一定的<em><strong>数据结构</strong></em>来进行存储,管理和组织的.</p>
<p>数据的仓库</p>
</li>
<li><p>DBMS - database management system - 数据库管理系统.用于操纵和控制数据库的系统.</p>
<p>用于建立,使用和维护我们的db. 用户通过dbms来访问db中的数据,dba通过dbms来管理和维护</p>
<p>我们的db. 使用dbms来保证db的安全性和完整性.</p>
</li>
<li><p>RDBMS - relational database management system关系型数据库管理系统 - 负责管理关系型数据库</p>
</li>
<li><p>关系型数据库 - 数据呈现的方式是一张二维表[行和列] - 表格型数据库</p>
</li>
<li><p>非关系型数据库[nosql] - 键值对数据库redis,文档型数据库mongodb</p>
</li>
<li><p>DBS - 数据库系统 - 类似”生态概念</p>
<p>DBS &#x3D; DB + DBA[数据库管理员] + DBMS</p>
</li>
</ol>
</blockquote>
<hr>
<h1 id="4-SQL分类"><a href="#4-SQL分类" class="headerlink" title="4. SQL分类"></a>4. SQL分类</h1><blockquote>
<p>它同时也是我们的脚本文件的后缀.</p>
</blockquote>
<blockquote>
<p>structured query language结构化查询语言…</p>
<p>按照功能来划分</p>
<ol>
<li><p>DDL - Data Definition Language - 数据定义语言</p>
<p>create,drop,alter等等…</p>
</li>
<li><p>DCL - Data Control Language - 数据控制语言</p>
<p>grant(授权),revoke(取消权限)等等…</p>
</li>
<li><p>DQL - Data Query Languge  - 数据查询语言</p>
<p><strong>select - 查询</strong></p>
</li>
<li><p>DML - Data Manipution Language - 数据操纵语言</p>
<p><strong>insert,delete,update</strong></p>
</li>
<li><p>TCL - Transaction Control Languge - 事务控制语言</p>
<p>commit,rollback,savepoint等等…</p>
</li>
</ol>
</blockquote>
<hr>
<h1 id="mysql的客户端的选择"><a href="#mysql的客户端的选择" class="headerlink" title="mysql的客户端的选择"></a>mysql的客户端的选择</h1><blockquote>
<ol>
<li>界面更加友好的话 - navicat导航猫 - 不建议装.</li>
<li>安装好mysql之后,实际上它会默认安装好mysql-server以及mysql-client</li>
</ol>
</blockquote>
<h1 id="5-体验-导入脚本"><a href="#5-体验-导入脚本" class="headerlink" title="5. 体验 - 导入脚本"></a>5. 体验 - 导入脚本</h1><blockquote>
<p>mysql是以仓库的方式来管理若干表的.建表之前,需要先创建仓库.并且不同的仓库之间是不可见的.</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql -uroot -proot</span><br></pre></td></tr></table></figure>

<p><code>查看当前所有的数据库</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p><code>删除仓库</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure>

<p><code>创建一个仓库</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 数据库名;</span><br><span class="line"></span><br><span class="line">create database yuke;</span><br></pre></td></tr></table></figure>

<p><code>表一定是放在仓库下的 - 若干张表构建一个db</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 选择db</span><br><span class="line"></span><br><span class="line">use 数据库名</span><br><span class="line"></span><br><span class="line">use yuke</span><br></pre></td></tr></table></figure>

<p><code>查看一下当前仓库下所有的表</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>导入脚本的两种方式:</p>
<ol>
<li><p>source sql脚本文件的绝对地址;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; source /Users/admin/Documents/success/e/mysql_cn.sql ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动打开sql脚本 - 复制内容 - 粘贴</p>
</li>
</ol>
</blockquote>
<hr>
<h1 id="6-简单查询"><a href="#6-简单查询" class="headerlink" title="6. 简单查询"></a>6. 简单查询</h1><blockquote>
<p>查询的本质</p>
<ol>
<li>到哪里查-查看的是哪张表</li>
<li>查什么 - 查看的列[数据域Field]</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>客户端的命令 - 查看表的结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名</span><br><span class="line"></span><br><span class="line">desc s_emp;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>每张表都会拥有一个主键列,通常是id列.存在组合主键的情况,主键的特点是用来唯一标识元组[一行]记录的.</p>
<p>主键列的特点 : 非空且唯一.</p>
</blockquote>
<hr>
<blockquote>
<p>单表查询语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 [列别名],列名2 [列别名2] </span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 条件语句</span><br><span class="line">ORDER BY 排序列;</span><br></pre></td></tr></table></figure>

<p>精简一点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 列名 [列别名],列名2 [列别名2] </span><br><span class="line">FROM 表名;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>特殊 - 查询所有列,直接用*表示,但是开发中不允许的…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from s_emp;</span><br></pre></td></tr></table></figure>

<p><code>列比较多的场景</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from s_emp \G;</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h2 id="1-列别名"><a href="#1-列别名" class="headerlink" title="1. 列别名"></a>1. 列别名</h2><blockquote>
<ol>
<li><p>查看员工的名字和薪资以及入职日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select first_name,salary,start_date from s_emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取别名 - 提高可读性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select first_name 名字,salary 薪资,start_date 入职日期 from s_emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select first_name as 名字,salary as 薪资,start_date as 入职日期 from s_emp;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select first_name &quot;名字&quot;,salary &quot;薪资&quot;,start_date &quot;入职日期&quot; from s_emp;</span><br><span class="line">   </span><br><span class="line">select first_name as &quot;名字&quot;,salary as &quot;薪资&quot;,start_date as &quot;入职日期&quot; from s_emp;</span><br></pre></td></tr></table></figure>

<p><code>数据库的单行函数 - concat函数 - 表示拼接 - concat(列1,列2,...) - 可变长参数列表</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工的姓名(last_name,first_name)</span><br><span class="line">select last_name,first_name from s_emp;</span><br><span class="line">   </span><br><span class="line">-- 仅仅只有1列展示</span><br><span class="line">-- db中表示字符串或者字符的永远是单引号.</span><br><span class="line">-- db中的双引号是用来包裹格式用的</span><br><span class="line">select concat(last_name,&#x27; &#x27;,first_name) &quot;姓 名&quot; from s_emp;</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<h2 id="2-练习"><a href="#2-练习" class="headerlink" title="2. 练习"></a>2. 练习</h2><blockquote>
<ol>
<li><p>查看员工的所有的职称title</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from s_emp;</span><br><span class="line"></span><br><span class="line">-- 检索出所有的title,包括重复的数据</span><br><span class="line">-- 使用关键字distinct来实现去重操作</span><br><span class="line">select distinct title from s_emp;</span><br><span class="line"></span><br><span class="line">-- 其他应用</span><br><span class="line">-- 分组函数count,统计表中的记录数[行数],重复的数据也算一行(有一个算一个).null值数据不算的.</span><br><span class="line">-- 统计title的数量</span><br><span class="line">select count(distinct title) from s_emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看员工的年薪</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 列是可以参加计算的,但是null值的数据计算的结果还是null值</span><br><span class="line">select first_name,salary*12 年薪 from s_emp;</span><br><span class="line"></span><br><span class="line">-- 上面查询出来的年薪不带提成的,需求是带上提成</span><br><span class="line">select first_name,salary*12*(1+commission_pct/100) 年薪 from s_emp;</span><br><span class="line"></span><br><span class="line">-- 发现上面查询出来的年薪,如果员工不带提成,计算的结果是null,需要使用mysql的空值置换函数</span><br><span class="line">-- coalesce(m,n) 如果m为null则结果是n,否则结果仍然是m</span><br><span class="line">-- 类似于java中的if/else  ,  三元操作符  m==null?n:m</span><br><span class="line">select first_name,salary*12*(1+coalesce(commission_pct,0)/100) 年薪 from s_emp;</span><br><span class="line"></span><br><span class="line">-- 使用mysql的关于数字的函数truncate或者round</span><br><span class="line">-- round(m[,n])  n存在,则代表小数的精度 - 四舍五入</span><br><span class="line"></span><br><span class="line">-- truncate(m,n) n保留的精度,直接截取</span><br><span class="line"></span><br><span class="line">-- 函数都是允许嵌套使用的</span><br><span class="line">-- 年薪保留整数位</span><br><span class="line">select first_name,truncate(salary*12*(1+coalesce(commission_pct,0)/100),0) 年薪 from s_emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看区域表所有的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from s_region;</span><br><span class="line"></span><br><span class="line">-- Africa / Middle East 非洲/中东</span><br><span class="line">-- Asia 亚洲</span><br><span class="line">-- Europe 欧洲</span><br><span class="line">-- North America   北美</span><br><span class="line">-- South America   南美</span><br><span class="line"></span><br><span class="line">case 列名 ... </span><br><span class="line">	when 列值  then &#x27;新值&#x27;</span><br><span class="line">	when 列值  then &#x27;新值&#x27;</span><br><span class="line">	when 列值  then &#x27;新值&#x27;</span><br><span class="line">	else &#x27;未知值&#x27;</span><br><span class="line">end 列别名</span><br><span class="line"></span><br><span class="line">select id,</span><br><span class="line">case name</span><br><span class="line">	when &#x27;Asia&#x27; then &#x27;亚洲&#x27;</span><br><span class="line">	when &#x27;Europe&#x27; then &#x27;欧洲&#x27;</span><br><span class="line">	when &#x27;North America&#x27; then &#x27;北美&#x27;</span><br><span class="line">	else &#x27;未知区域&#x27;</span><br><span class="line">end 区域名 from s_region;</span><br><span class="line"></span><br><span class="line">-- 上面的列和when后面的值是精确的匹配,如果是范围匹配</span><br><span class="line">-- 查看id,first_name,员工的薪水,薪水的等级</span><br><span class="line">-- salary&gt;=1800,高产  如果是[1200,1800) - 中产,低于120 - 无产</span><br><span class="line"></span><br><span class="line">select id,first_name,salary,</span><br><span class="line">case </span><br><span class="line">	when salary&gt;=1800 then &#x27;高产&#x27;</span><br><span class="line">	when salary&gt;=1200 and salary&lt;1800 then &#x27;中产&#x27;</span><br><span class="line">	else &#x27;无产&#x27;</span><br><span class="line">end &#x27;工资等级&#x27; from s_emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看订单的id,总价,支付方式(现金&#x2F;信用卡)以及下单日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id,total,case payment_type</span><br><span class="line">	when &#x27;CREDIT&#x27; then &#x27;信用卡&#x27;</span><br><span class="line">	when &#x27;CASH&#x27; then &#x27;现金&#x27;</span><br><span class="line">	else &#x27;未知方式&#x27;</span><br><span class="line">end 支付方式,date_ordered from s_ord;</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<h1 id="7-作业"><a href="#7-作业" class="headerlink" title="7. 作业"></a>7. 作业</h1><blockquote>
<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ol>
<li><p>instr(str,substr) - 返回字符串substr在字符串str第一次出现的位置(str不包含substr时返回0)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select intsr(&#x27;abdcd&#x27;,&#x27;d&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>lpad(str,len,padstr) - 用字符串padstr填补str左端直到字串长度为len并返回 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lpad(&#x27;hkw&#x27;,6,&#x27;mxy&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>rpad(str,len,padstr) - 用字符串padstr填补str右端直到字串长度为len并返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select rpad(&#x27;mxy&#x27;,7,&#x27;hkw&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>left(str,len) - 返回字符串str的左端len个字符 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select left(&#x27;mxy&#x27;,2);</span><br></pre></td></tr></table></figure>


</li>
<li><p>right(str,len) - 返回字符串str的右端len个字符 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select right(&#x27;mxy&#x27;,2);</span><br></pre></td></tr></table></figure>


</li>
<li><p>substring(str,pos,len) - 返回字符串str的位置pos起len个字符  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substring(&#x27;123456&#x27;,&#x27;2&#x27;,2);</span><br></pre></td></tr></table></figure>


</li>
<li><p>substring(str,pos) - 返回字符串str的位置pos起后面的子串 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substring(&#x27;qwert&#x27;,&#x27;2&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>ltrim(str) - 返回删除了左空格的字符串str  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ltrim(&#x27; string&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>rtrim(str)  - 返回删除了右空格的字符串str  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select rtrim(&#x27;string&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>space(n) - 返回由n个空格字符组成的一个字符串  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select space(4);</span><br></pre></td></tr></table></figure>


</li>
<li><p><em><strong>replace(str,from_str,to_str)  - 用字符串to_str替换字符串str中的子串from_str并返回</strong></em> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select replace(&#x27;13331&#x27;,&#x27;333&#x27;,&#x27;222&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>reverse(str) - 颠倒字符串str的字符顺序并返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select reverse(&#x27;abcdefg&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>insert(str,pos,len,newstr) - 把字符串str由位置pos起len个字符长的子串替换为字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select insert(&#x27;abcdefg&#x27;,&#x27;2&#x27;,3,&#x27;dcb&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>lower(str) - 返回小写的字符串str  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lower(&#x27;ABCDE&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>upper(str) - 返回大写的字符串str</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select lower(&#x27;abcde&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>char_length(str) -  不管汉字还是数字或者是字母都算是一个字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select char_length(&#x27;穆星宇123&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>length(str);&#x2F;&#x2F;汉字占3个,其他占1个.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select length(&#x27;穆星宇123&#x27;);</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<blockquote>
<h2 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h2><ol>
<li><p>abs(n) - 求绝对值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select abs(-30);</span><br></pre></td></tr></table></figure>


</li>
<li><p>mod(n,m) - 取模运算,返回n被m除的余数(同%操作符)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select mod(7,3);</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>floor(n) - 返回不大于n的最大整数值</strong> - 向下取整  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select floor(3.1772);</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>ceiling(n) - 返回不小于n的最小整数值</strong>  - 向上取整 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ceiling(3.37);</span><br></pre></td></tr></table></figure>


</li>
<li><p>round(n[,d]) - 返回n的四舍五入值,保留d位小数(d的默认值为0)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select round(3.57);      select round(3.5762,2);</span><br></pre></td></tr></table></figure>


</li>
<li><p>pow(x,y) - 返回值x的y次幂  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select pow(12,3);</span><br></pre></td></tr></table></figure>


</li>
<li><p>sqrt(n) - 返回非负数n的平方根</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sqrt(4);</span><br></pre></td></tr></table></figure>


</li>
<li><p>pi() - 返回圆周率  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select pi();</span><br></pre></td></tr></table></figure>


</li>
<li><p>rand() - 返回在范围[0到1.0)内的随机浮点值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select rand();</span><br></pre></td></tr></table></figure>


</li>
<li><p>truncate(n,d) - 保留数字n的d位小数并返回  - 直接截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select truncate(3.1415,2)</span><br></pre></td></tr></table></figure></li>
</ol>
</blockquote>
<hr>
<blockquote>
<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><p>查询当前系统的日期 - select now();</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select now();</span><br></pre></td></tr></table></figure>



<ol>
<li><p>dayofweek(date) - 返回日期date是星期几(1&#x3D;星期天,2&#x3D;星期一,……7&#x3D;星期六,odbc标准)  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dayofweek(now());</span><br></pre></td></tr></table></figure>
</li>
<li><p>weekday(date) - 返回日期date是星期几(0&#x3D;星期一,1&#x3D;星期二,……6&#x3D; 星期天)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select weekday(now());</span><br></pre></td></tr></table></figure>


</li>
<li><p>year(date) - 返回date的年份(范围在1000到9999)    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select year(now());</span><br></pre></td></tr></table></figure>


</li>
<li><p>month(date)  - 返回date中的月份数值   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select month(&#x27;2023-07-10&#x27;);</span><br></pre></td></tr></table></figure>


</li>
<li><p>dayofmonth(date) - 返回date是一月中的第几日(在1到31范围内)   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select dayofmonth(now());</span><br></pre></td></tr></table></figure>


</li>
<li><p>hour(time) - 返回time的小时数(范围是0到23)  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select hour(now());</span><br></pre></td></tr></table></figure>


</li>
<li><p>minute(time) - 返回time的分钟数(范围是0到59)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select minute(now());</span><br></pre></td></tr></table></figure>


</li>
<li><p>second(time) - 返回time的秒数(范围是0到59) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select second(now());</span><br></pre></td></tr></table></figure>


</li>
<li><p>period_add(p,n) - 增加n个月到时期p并返回(p的格式’yymm’或’yyyymm’) </p>
<p>mysql&gt;select period_add(‘202008’,3) ;</p>
<p>注意:p可以是字符串,一定要满足一定的格式,或者可以直接使用date类型.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select period_add(&#x27;2307&#x27;,2);</span><br></pre></td></tr></table></figure>


</li>
<li><p>period_diff(p1,p2) - 返回在时期p1和p2之间月数(p1和p2的格式yymm或yyyymm)  p1-p2(p1减p2)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select period_diff(2302,2307);</span><br></pre></td></tr></table></figure>


</li>
<li><p>curdate() - 以’yyyy-mm-dd’或yyyymmdd格式返回当前日期值(根据返回值所处上下文是字符串或数字) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select curdate();</span><br></pre></td></tr></table></figure>


</li>
<li><p>curtime() - 以’hh:mm:ss’或hhmmss格式返回当前时间值(根据返回值所处上下文是字符串或数字)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select curtime();</span><br></pre></td></tr></table></figure>


</li>
<li><p>now() - 以’yyyy-mm-dd hh:mm:ss’或yyyymmddhhmmss格式返回当前日期时间(根据返回值所处上下文是字符串或数字)     </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select now();</span><br></pre></td></tr></table></figure>


</li>
<li><p>last_day(date) - date日期所在月的最后一天是什么时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select last_day(now());</span><br></pre></td></tr></table></figure>


</li>
<li><p>datediff(d1,d2) - 两个日期d1,d2之间相差的天数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select datediff(20230717,20230831);</span><br></pre></td></tr></table></figure>


</li>
<li><p>timestampdiff(type,d1,d2) - type是YEAR,d1和d2相差的年份,MONTH,月份</p>
<p>d1,d2 - yyyymmdd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select timestampdiff(year,20210717,20230831);</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
</blockquote>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2入门</title>
    <url>/2023/07/13/vue2%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>vue是用来构建用户界面的一个渐进式框架</p>
<blockquote>
<ol>
<li>构建用户界面 - 将用户手中的数据通过某种方式,能够呈现出来.</li>
<li>渐进式 - vue是自底向上的逐层应用,如果体量比较小的,只需要简单的轻量级的插件库即可.如果比较大,可以继续添加另外的插件库.</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>发展史</p>
<ol>
<li><em><strong>vue2.x - 入门</strong></em><ul>
<li>最新稳定版本：2.7.14</li>
<li>旧版本 - 2.6.x</li>
</ul>
</li>
<li>vue3.x - 趋势</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p>vue2中文学习文档 - <a class="link" href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/<i class="fas fa-external-link-alt"></i></a></p>
<p>下载vue.js</p>
</blockquote>
<hr>
<h2 id="1-vue优点"><a href="#1-vue优点" class="headerlink" title="1. vue优点"></a>1. vue优点</h2><blockquote>
<p>传统的仍然是使用javascript原生的技术或者使用javascript[简称js]的框架jquery.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//模拟一个data - 动态改变的 - 肯定是来自于db表中的数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> data = <span class="string">&#x27;没有vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//只能通过js操作dom</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//1. 获取dom元素 - 根据id属性的值来获取</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//2. 调用调用属性  -  访问/设置</span></span></span><br><span class="line"><span class="language-javascript">  div.<span class="property">innerHTML</span>=<span class="string">&quot;hello-&quot;</span>+data</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<blockquote>
<ol>
<li><p>vue出现解放了程序员用js操作dom的双手</p>
<p><code>采用的是声明式编码,不再需要js去操作dom了,比较方便</code></p>
</li>
<li><p>采用组件化编程的方式.提高组件的复用性</p>
<img src="/2023/07/13/vue2%E5%85%A5%E9%97%A8/组件式.png">
</li>
<li><p>采用的是虚拟DOM+diff算法,复用dom节点,提高效率</p>
<img src="/2023/07/13/vue2%E5%85%A5%E9%97%A8/Diff.png"></li>
</ol>
</blockquote>
<h1 id="4-vscode环境"><a href="#4-vscode环境" class="headerlink" title="4. vscode环境"></a>4. vscode环境</h1><blockquote>
<p>下载地址:<a class="link" href="https://code.visualstudio.com/">https://code.visualstudio.com/<i class="fas fa-external-link-alt"></i></a></p>
<p>下载必要的插件</p>
<ol>
<li><p>open in browser</p>
<p>本地协议的方式打开html文件</p>
</li>
<li><p><strong>Live Server</strong> - 启动一个轻量级的服务器</p>
<p><strong>使用http协议来请求访问我们的html文件</strong></p>
</li>
</ol>
</blockquote>
<hr>
<blockquote>
<ol>
<li><p>新建一个文件夹yuke-vue</p>
<p><code>项目的根目录</code></p>
</li>
<li><p>打开vscode - 菜单栏file -  open Folder</p>
</li>
<li><p>在项目的根目录下新建一个plugins目录 - 然后将vue.js拷贝进去.</p>
</li>
</ol>
</blockquote>
<p>–</p>
<h1 id="5-vue-体验"><a href="#5-vue-体验" class="headerlink" title="5. vue-体验"></a>5. vue-体验</h1><blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义一个div的容器,必须要给定一个唯一的id属性的值</span></span><br><span class="line"><span class="comment">   并且一个页面中只能有一个容器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  hello-&#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果页面中存在多个id相同的容器的时候,只有第一个是生效的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="comment">  hello-&#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="comment">&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   引入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugins/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义了一个vue的实例</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一个页面只能有唯一的一个vue实例</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// vue实例是对应一个容器,通过el属性来进行绑定的</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义的data中的数据,它是可以流向到页面的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 并且只要data中数据的改变了,页面都会重新渲染</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>:<span class="string">&#x27;学习vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>测试**: 开发中的data是动态改变的,模板中使用到该数据的地方都会重新渲染** - 为什么data数据要交给vue实例来管理.</p>
</blockquote>
<hr>
<p>总结:</p>
<ol>
<li>一个页面中如果出现多个相同容器,一个vue实例的时候,默认是第一个容器是渲染成功的.</li>
<li>一个容器应该只对应vue实例</li>
<li>vue实例的el属性值对应容器的id属性值</li>
<li>中的xxx是一个js表达式,也可以是**vue实例上的东西**
<ul>
<li>js表达式 - 是可以产生具体的值的  1+2</li>
<li>js代码 - if语句,while语句</li>
<li>js表达式也是一种特殊的js代码</li>
</ul>
</li>
</ol>
<hr>
<h1 id="6-vscode中设置一下代码的片段"><a href="#6-vscode中设置一下代码的片段" class="headerlink" title="6. vscode中设置一下代码的片段"></a>6. vscode中设置一下代码的片段</h1><blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascript,typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vv&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;new Vue(&#123;&quot;</span></span><br><span class="line">				<span class="string">&quot;    el:&#x27;#app&#x27;,&quot;</span></span><br><span class="line">				<span class="string">&quot;    data:&#123;&quot;</span></span><br><span class="line"></span><br><span class="line">				<span class="string">&quot;    &#125;&quot;</span></span><br><span class="line"></span><br><span class="line">			<span class="string">&quot;&#125;);&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	 	<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cls&quot;</span><span class="punctuation">,</span></span><br><span class="line">	 	<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	 		<span class="string">&quot;console.log(&#x27;$1&#x27;);&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$2&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="7-插值写法和指令写法"><a href="#7-插值写法和指令写法" class="headerlink" title="7. 插值写法和指令写法"></a>7. 插值写法和指令写法</h1><ol>
<li><p>插值写法 - 功能是用来解析标签体内容的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">开始标签</span>&gt;</span>&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">结束标签</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指令写法 - 功能是用来解析标签的(绑定标签的属性,绑定标签的事件)</p>
<p><strong>v-bind</strong> v-model v-on v-for v-if v-show   &#x3D;&gt;  v-指令名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">v-bind是单向绑定 - 数据流只能从data流向页面.</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 插值写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello-&#123;&#123;city&#125;&#125;-&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 超链接 </span></span><br><span class="line"><span class="comment">        通过指令的写法来绑定href值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;site.url&quot;</span>&gt;</span>&#123;&#123;site.wname&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- v-bind:href可以简写成:href --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;site.url&quot;</span>&gt;</span>&#123;&#123;site.wname&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugins/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// key:value</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// json对象的格式   &#123;key1:value1,key2:value2,key3:value3&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//value都是字符串类型,js单/双引号都是允许表示字符串的</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">city</span>:<span class="string">&#x27;SuZhou&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;aistar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//关于value允许是一切类型,那么value又可以是一个json对象.</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">site</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:<span class="string">&#x27;http://www.baidu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">wname</span>:<span class="string">&#x27;百度一下&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="8-单向绑定和双向绑定"><a href="#8-单向绑定和双向绑定" class="headerlink" title="8. 单向绑定和双向绑定"></a>8. 单向绑定和双向绑定</h1><ol>
<li>单向绑定:数据只能从data流向页面</li>
<li>双向绑定:数据不仅可以从data流向页面,还可以从页面流向data</li>
<li>双向绑定一般应用表单元素上(比如input&#x2F;select等等)</li>
<li>双向绑定语法v-model:value可以写成成v-model,默认收集的就是value属性值.</li>
</ol>
<hr>
<blockquote>
<p>代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单向绑定-数据只能从data流向页面 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;single&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 双向绑定:数据不仅可以从data流向页面,还可以从页面流向data --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- v-model:value可以简写成v-model,默认收集的就是value属性值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 插值语法 --&gt;</span></span><br><span class="line">  &#123;&#123;two&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugins/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">single</span>:<span class="string">&#x27;单向&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">two</span>:<span class="string">&#x27;双向&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="9-数据代理"><a href="#9-数据代理" class="headerlink" title="9. 数据代理"></a>9. 数据代理</h1><blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">hello-&#123;&#123;msg&#125;&#125;  </span><br><span class="line"></span><br><span class="line">vue实例上的 &#123;&#123;_data.msg&#125;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h2 id="1-java中的代理"><a href="#1-java中的代理" class="headerlink" title="1. java中的代理"></a>1. java中的代理</h2><ol>
<li><p>正向代理</p>
<p>客户端明确知道服务器的地址,但是没有办法进行直接的访问.需要通过代理服务器进行访问.</p>
<p>client[浏览器]    &#x3D;&gt; 输入网址(发送请求)    &#x3D;&gt;  代理服务器   &#x3D;&gt; 转发到目标服务器</p>
<p><strong>服务器是不知道具体的客户端的位置的.</strong></p>
<p><strong>正向代理-代理的是客户端</strong></p>
</li>
</ol>
<p>​		举例:  我想跟       琪琪    强老师借钱</p>
<ol>
<li><p><strong>反向代理</strong></p>
<p>场景: client &#x3D;&gt; taobao.com(背后有n个服务为taobao.com服务的)</p>
<p>client  &#x3D;&gt; 发送请求taobao.com[代理服务器的地址]  &#x3D;&gt; 代理server互换后台的那些N个服务[每个服务都有接口地址]<br>我(client ) 向 琪琪借钱[代理server] &#x3D;&gt; 跟强&#x2F;王老师借了一点…</p>
<p><strong>客户端是不知道具体的服务器的位置的</strong></p>
<p><strong>反向代理 - 代理的服务器(nginx)</strong></p>
<p>原因:为了真实的server的安全.</p>
</li>
</ol>
<h2 id="2-Object-defineProperty"><a href="#2-Object-defineProperty" class="headerlink" title="2. Object.defineProperty"></a>2. Object.defineProperty</h2><blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//比如定义一个json对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> user=&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;qiqi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:<span class="string">&#x27;F&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(user,<span class="string">&#x27;age&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">value</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//遍历/迭代对象中所有的属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//age默认是不可被迭代</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(user));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> user)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(k);      </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>浏览器控制台</p>
<img src="/2023/07/13/vue2%E5%85%A5%E9%97%A8/dp01.png"> 

<ol>
<li><p>使用 Object.defineProperty定义的属性是灰色的.</p>
<p>代表这个属性不可被迭代&#x2F;遍历</p>
</li>
<li><p>默认是不可被删除的</p>
<img src="/2023/07/13/vue2%E5%85%A5%E9%97%A8/dp02.png">  
</li>
<li><p>默认不可被修改</p>
<img src="/2023/07/13/vue2%E5%85%A5%E9%97%A8/dp03.png"></li>
</ol>
<hr>
<p>配置项讲解,让Object.defineProperty定义的属性可以被迭代,修改,删除</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(user,<span class="string">&#x27;age&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">  <span class="comment">// 配置项</span></span><br><span class="line">  <span class="comment">//可以被修改</span></span><br><span class="line">  <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 可以被删除</span></span><br><span class="line">  <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//可以被枚举/遍历/迭代</span></span><br><span class="line">  <span class="attr">enumerable</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<p><code>代码2</code></p>
<p>效果: 修改age的值,能够对num造成影响</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//定义一个num</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> num = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//比如定义一个json对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> user=&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;qiqi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>:<span class="string">&#x27;F&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 修改num值,不会对age造成任何影响</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// age:num</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//&quot;错误的视觉&quot;  -  修改num的值,好像是可以影响age</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//num是age的代理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(user,<span class="string">&#x27;age&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//修改age-对num造成影响</span></span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//调用/访问age的值的时候,getter方法就会走   </span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//user.age</span></span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//点击age:省略号  - 走一次getter</span></span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getter...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> num;</span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">//只要修改age的值,那么就会调用setter方法</span></span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">set</span>(<span class="params">v</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;修改的值是:&#x27;</span>+v);   </span></span><br><span class="line"><span class="language-javascript">             num = v;</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-数据代理简单示例"><a href="#3-数据代理简单示例" class="headerlink" title="3. 数据代理简单示例"></a>3. 数据代理简单示例</h2><blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">x</span>:<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求</span></span><br><span class="line"><span class="comment">//1.通过Object.defineProperty给obj2新增一个属性x</span></span><br><span class="line"><span class="comment">//2. 效果: 用obj2.x来代理obj1这个对象中的x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改obj2.x的值,期望obj1.x也会跟着后面变化</span></span><br><span class="line"><span class="comment">//数据代理:通过一个对象来代理另外一个对象中属性的操作[读/写]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> obj1.<span class="property">x</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">v</span>)&#123;</span><br><span class="line">obj1.<span class="property">x</span> = v; </span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<img src="/2023/07/13/vue2%E5%85%A5%E9%97%A8/dp04.png"> 
</blockquote>
<hr>
<h2 id="4-vue中的数据代理"><a href="#4-vue中的数据代理" class="headerlink" title="4. vue中的数据代理"></a>4. vue中的数据代理</h2><blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>地址:&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>名称:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;plugins/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">address</span>:<span class="string">&#x27;苏州&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;admin&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>证明vm实例身上的_data就是js代码中的data</code>,但是直接输入vm._data&#x3D;&#x3D;data报错</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">VM269:1 <span class="title">Uncaught</span> <span class="title">ReferenceError</span>: <span class="title">data</span> <span class="title">is</span> <span class="title">not</span> <span class="title">defined</span></span></span><br><span class="line"><span class="function"><span class="title">at</span> &lt;<span class="title">anonymous</span>&gt;:1:11</span></span><br></pre></td></tr></table></figure>

<p><code>技巧</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;苏州&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="comment">// data:data</span></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">data</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>vm._data&#x3D;&#x3D;data返回true</p>
<p>原理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm,<span class="string">&#x27;address&#x27;</span>,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> data中的address</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="property">address</span>实际上访问的就是data中的address</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<p>图示111</p>
<img src="/2023/07/13/vue2%E5%85%A5%E9%97%A8/数据代理图示.png" style="zoom:;">

<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">虽然data就是_data,底层做了数据劫持[此处_data是对data功能上面做了升级的],数据是可以流向页面的.</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <tags>
        <tag>学习是个艰难的过程</tag>
      </tags>
  </entry>
</search>
